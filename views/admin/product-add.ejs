<!DOCTYPE html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Fruitables Admin</title>
  
   <!-- End layout styles -->
    <!-- <link rel="shortcut icon" href="../../public/img/hero-img-1.png" /> -->
    <style>
/* General body styling */
body {
    font-family: 'Arial', sans-serif;
    background-color: #f4f5f7;
    color: #333;
    padding: 20px;
    margin: 0;
    margin-top: 20px;
}

.content-main {
    margin-top: 50px;
    background-color:black;
    border-radius: 8px;
    padding: 20px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    color:white
}

/* Title styling */
.content-title {
    font-size: 32px;
    font-weight: bold;
    color: #333;
    margin-bottom: 10px;
    margin-top:50px;
    margin-left: 50px;
    
}

/* Form section styling */
form {
    display: flex;
    flex-direction: column;
}

.mb-4 {
    margin-bottom: 20px;
}

.form-label {
    font-size: 14px;
    font-weight: 600;
    color: #555;
}

.form-control {
    padding: 12px;
    border-radius: 6px;
    border: 1px solid #ddd;
    font-size: 14px;
    color: #333;
    width: 100%;
}

.form-control:focus {
    border-color: #81C408;
    box-shadow: 0 0 5px rgba(129, 196, 8, 0.5);
}

/* Error message styling */
.error-message {
    color: #dc3545;
    font-size: 12px;
    margin-top: 5px;
}

/* Button styling */
button[type="submit"] {
    background-color: #81C408;
    color: white;
    padding: 12px 20px;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-size: 16px;
    margin-top: 20px;
    transition: background-color 0.3s;
}

button[type="submit"]:hover {
    background-color: #0056b3;
}

/* Select dropdown styling */
.select-dropdown {
    padding: 12px;
    border-radius: 6px;
    border: 1px solid #ddd;
    font-size: 14px;
    background-color: #fff;
}

/* Radio buttons and labels styling */
.form-check-input {
    margin-right: 10px;
}

.form-check-label {
    font-size: 14px;
    color: #555;
}

/* Image uploader styling */
#upload {
    padding: 10px;
    border-radius: 6px;
    background-color: #fff;
    border: 1px solid #ddd;
    margin-bottom: 20px;
}

#cropperContainers {
    margin-top: 10px;
}

#cropperContainer1 {
    display: none;
    margin-top: 20px;
}

#saveButton1 {
    margin-top: 10px;
    background-color: #81C408;
    color: white;
    padding: 8px 15px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

#saveButton1:hover {
    background-color: #0056b3;
}

/* Flex layout for row elements */
.row {
    display: flex;
    flex-wrap: wrap;
    gap: 20px;
}

.col-lg-4 {
    flex: 1;
    min-width: 250px;
}

/* Thumbnails container */
.thumbnails-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
}

.thumbnail {
    width: 100px;
    height: 100px;
    object-fit: cover;
    border-radius: 8px;
}

/* Card styles */
.card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.card-body {
    padding: 20px;
}

    </style>
</head>
<body>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" rel="stylesheet">
    <%- include("../../views/partials/admin/header") %>

    <section class="content-main">
        <div class="row" >
            <div class="col-9">
                <div class="content-header ">
                    <h2  class="card-title text-center">Add New Product</h2>
                </div>
            </div>
            <div class="col-lg-12">
                <div class="card mb-8">
                    <div class="card-body">
                        <form id="productForm">
                            <div class="mb-8">
                                <label for="product_name" class="form-label">Product Name</label>
                                <input type="text" placeholder="Type here" name="productName" class="form-control" id="product_name">
                                <div id="productName-error" class="error-message"></div>
                            </div>
    
                            <div class="mb-4">
                                <label class="form-label">Full Description</label>
                                <textarea placeholder="Type here" id="descriptionid" name="description" class="form-control" rows="4"></textarea>
                                <div id="description-error" class="error-message"></div>
                            </div>
    
                            <div class="row">
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Regular Price</label>
                                        <input placeholder="₹" name="regularPrice" type="text" class="form-control">
                                        <div id="regularPrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Sale Price</label>
                                        <input placeholder="₹" name="salePrice" type="text" class="form-control">
                                        <div id="salePrice-error" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Stock</label>
                                        <input name="stock" type="text" class="form-control">
                                        <div id="stock" class="error-message"></div>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <label class="form-label">Color</label>
                                        <input name="color" type="text" class="form-control">
                                        <div id="color-error" class="error-message"></div>
                                    </div>
                                </div>
                            </div>
    
    
                            <div class="row">
                                <div class="col-lg-2">
                                    <label class="form-label">Item</label>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <input class="form-check-input" type="radio" name="item" id="item1" value="Fruit">
                                        <label class="form-check-label" for="item1">Fruit</label>
                                    </div>
                                </div>
                                <div class="col-lg-4">
                                    <div class="mb-4">
                                        <input class="form-check-input" type="radio" value="Vegetable" id="item2" checked>
                                        <label class="form-check-label" for="item2">Vegetable</label>
                                    </div>
                                </div>
                            </div>
    
                            <div class="mb-4">
                                <label class="form-label">Category</label>
                                <select class="form-select" name="category" id="category">
                                    <% for (let i = 0; i < cat.length; i++) { %>
                                    <option value="<%= cat[i].name %>"><%= cat[i].name %></option>
                                    <% } %>
                                </select>
                                <div id="category-error" class="error-message"></div>
                            </div>
    
                            <div class="row">
                                <div class="col-lg-4">
                                    <label class="form-label">Status</label>
                                </div>
                                <div class="col-lg-4">
                                    <select class="form-select" name="Available" id="category">
                                        <option value="Available">Available</option>
                                        <option value="Out of Stock">Out of Stock</option>
                                        <option value="Removed">Removed</option>
                                    </select>
                                    <div id="Available-error" class="error-message"></div>
                                </div>
                            </div>
    
                            <!-- Image upload section -->
                            <div class="row">
                                <div class="col-lg-4">
                                    <label class="form-label">Choose Images</label>
                                    <input type="file" id="upload" multiple onchange="handleImage(event)" class="form-control" />
                                </div>
                            </div>
    
                            <div id="cropperContainers"></div> 
                            <div id="cropperContainer1" class="crop-container" style="display: none;">
                                <img id="cropImage1" alt="Image to crop">
                                <button type="button" id="saveButton1" class="btn btn-primary mt-2">Save Cropped Image</button>
                            </div>
    
                            <div>
                                <button class="btn btn-md btn-primary" type="submit">ADD PRODUCT</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </section>
    
<script>
    const cloudName = "dwwxgavec";  // Replace with your Cloudinary cloud name
const uploadPreset = "my_images"; // Replace with your upload preset (can be found in Cloudinary dashboard)

let croppers = {};  // Object to store the cropper instances
let croppedImages = [];  // Array to store the cropped image blobs

const handleImage = (e) => {
    const files = e.target.files;  // Get the selected files
    console.log("Selected Files: ", files);

    // Clear any existing cropper containers
    const cropperContainers = document.getElementById("cropperContainers");
    cropperContainers.innerHTML = "";

    // Iterate through the selected files
    for (let i = 0; i < files.length; i++) {
        const file = files[i];
        const reader = new FileReader();

        // Create a new cropper container dynamically
        const cropperContainer = document.createElement('div');
        cropperContainer.id = `cropperContainer${i}`;
        cropperContainer.style.marginBottom = "20px";  // Styling for separation
        cropperContainers.appendChild(cropperContainer);

        // Create an image element for previewing the selected image
        const img = document.createElement('img');
        img.id = `cropImage${i}`;
        img.style.width = '300px';
        img.style.height = '200px';
        cropperContainer.appendChild(img);

        const saveButton = document.createElement('button');
        saveButton.textContent = 'Save Cropped Image';
        saveButton.id = `saveButton${i}`;
        saveButton.setAttribute("type", "button");
        cropperContainer.appendChild(saveButton);

        // Read the file as data URL
        reader.onload = function () {
            img.src = reader.result;

            // Initialize the cropper for this image
            if (croppers[i]) {
                croppers[i].destroy();  // Destroy any existing cropper before initializing a new one
            }

            croppers[i] = new Cropper(img, {
                aspectRatio: 1,  // Maintain a square aspect ratio
                viewMode: 1,
                autoCropArea: 1,
            });

            // Handle the "Save Cropped Image" button click event
            saveButton.onclick = function () {
                const croppedCanvas = croppers[i].getCroppedCanvas({
                    width: 600,  // Resize to 600x600
                    height: 600
                });

                // Compress and convert the cropped image to a Blob
                croppedCanvas.toBlob(function (blob) {
                    const url = URL.createObjectURL(blob);

                    // If the image is already cropped, replace the preview with the new cropped image
                    img.src = url;  // Replace the preview with the new cropped image

                    img.dataset.blob = blob;  // Store the Blob for future submission (e.g., sending to the backend)

                    // Push the cropped image Blob to the array
                    croppedImages.push(blob);
                    console.log("Cropped Images Array: ", croppedImages);

                    // Display the cropped image
                    const croppedImagePreview = document.createElement('img');
                    croppedImagePreview.src = url;
                    croppedImagePreview.style.width = '200px';
                    croppedImagePreview.style.height = '200px';
                    cropperContainer.appendChild(croppedImagePreview);

                    // Hide the cropper container (or remove it)
                    cropperContainer.innerHTML = '';  // Clear the cropper UI
                    cropperContainer.appendChild(croppedImagePreview);  // Only show the cropped image

                    // Add a button to allow re-cropping the cropped image
                    const reCropButton = document.createElement('button');
                    reCropButton.textContent = 'Re-Crop This Image';
                    reCropButton.setAttribute("type", "button");
                    cropperContainer.appendChild(reCropButton);

                    // Handle re-cropping the cropped image
                    reCropButton.onclick = function () {
                        // Replace the cropped image with the cropper again
                        img.src = url;  // Use the cropped image as the source for re-cropping

                        // Destroy the previous cropper instance
                        croppers[i].destroy();

                        // Re-initialize the cropper with the cropped image
                        croppers[i] = new Cropper(img, {
                            aspectRatio: 1,  // Maintain a square aspect ratio
                            viewMode: 1,
                            autoCropArea: 1,
                        });

                        // Clear the cropped image preview and display the cropper again
                        cropperContainer.innerHTML = '';  // Clear the cropped image preview
                        cropperContainer.appendChild(img);  // Add the image back for cropping
                        cropperContainer.appendChild(saveButton);  // Add the save button
                    };
                }, 'image/jpeg', 0.7);  // Adjust the quality of the image (0.7 = 70%)
            };
        };

        reader.readAsDataURL(file);
    }
};

const uploadImageToCloudinary = (blob) => {
    const formData = new FormData();
    formData.append("file", blob);  // Append the cropped blob
    formData.append("upload_preset", uploadPreset);  // Add your upload preset (set in Cloudinary dashboard)

    return fetch(`https://api.cloudinary.com/v1_1/${cloudName}/image/upload`, {
        method: "POST",
        body: formData,
    })
        .then((response) => response.json())
        .then((data) => {
            const imageUrl = data.secure_url; // Cloudinary URL for the uploaded image
            console.log("Uploaded Image URL:", imageUrl);
            return imageUrl;
        })
        .catch((error) => {
            console.error("Error uploading image:", error);
            return null;
        });
};

document.getElementById('productForm').onsubmit = async function (event) {
    event.preventDefault();
//console.log("inside addproduct")
    // Get form data
    const productName = document.getElementById('product_name').value;
    const description = document.getElementById('descriptionid').value;
    const regularPrice = document.querySelector('[name="regularPrice"]').value;
    const salePrice = document.querySelector('[name="salePrice"]').value;
    const stock = document.querySelector('[name="stock"]').value;
    const color = document.querySelector('[name="color"]').value;
    const Status = document.querySelector('[name="Available"]').value;
    const category = document.getElementById('category').value;
   const radios=document.getElementsByName('item');
   let selectedValue;
   for (const radio of radios) { 
    if (radio.checked) {
         selectedValue = radio.value;
          break; } }
    const data = {
        productName: productName,
        description: description,
        regularPrice: regularPrice,
        salePrice: salePrice,
        stock: stock,
        color: color,
        category: category,
        item:selectedValue,
      
    };

    // Upload all cropped images to Cloudinary and get their URLs
    const imageUrls = [];
    for (let i = 0; i < croppedImages.length; i++) {
        const imageUrl = await uploadImageToCloudinary(croppedImages[i]);
        if (imageUrl) {
            imageUrls.push(imageUrl);
        }
    }

    // Add image URLs to the form data
    data.images = imageUrls;

    // Send the data to the backend
    axios.post('/admin/addProducts', data, {
        headers: {
            'Content-Type': 'application/json'
        }
    })
        .then(response => {
            alert('Product added successfully');
            window.location.href = '/admin/products';
        })
        .catch(error => {
            alert(error?.response?.data?.message || error?.message || 'Error adding product');
        });
        document.getElementById("productForm").reset();
         // Clear image input by resetting value
  const imageField = document.getElementById("cropperContainers");
  if (imageField) {
    imageField.value = "";
  }
  imageField.innerHTML = "";
  // Optional: Clear cropping preview if any
  const croppingPreview = document.getElementById("croppingPreview");
 
  if (croppingPreview) {
    croppingPreview.src = "";
    croppingPreview.style.display = "none";
  }

    };

</script>




<%- include("../../views/partials/admin/footer") %>

</body>
</html>
