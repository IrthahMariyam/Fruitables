<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Add New Product</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/cropperjs/dist/cropper.min.css"
    />
    <style>
      body {
        font-family: "Arial", sans-serif;
        background-color: #f4f5f7;
        color: #333;
        padding: 20px;
        margin: 0;
        margin-top: 20px;
      }

      .content-main {
        margin-top: 50px;
        background-color: black;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        color: white;
      }

      /* Title styling */
      .content-title {
        font-size: 32px;
        font-weight: bold;
        color: #333;
        margin-bottom: 10px;
        margin-top: 50px;
        margin-left: 50px;
      }

      /* Form section styling */
      form {
        display: flex;
        flex-direction: column;
      }

      .mb-4 {
        margin-bottom: 20px;
      }

      .form-label {
        font-size: 14px;
        font-weight: 600;
        color: #555;
      }

      .form-control {
        padding: 12px;
        border-radius: 6px;
        border: 1px solid #ddd;
        font-size: 14px;
        color: #333;
        width: 100%;
      }

      .form-control:focus {
        border-color: #81c408;
        box-shadow: 0 0 5px rgba(129, 196, 8, 0.5);
      }

      /* Error message styling */
      .error-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
      }

      /* Button styling */
      button[type="submit"] {
        background-color: #81c408;
        color: white;
        padding: 12px 20px;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        font-size: 16px;
        margin-top: 20px;
        transition: background-color 0.3s;
      }

      button[type="submit"]:hover {
        background-color: #0056b3;
      }

      /* Select dropdown styling */
      .select-dropdown {
        padding: 12px;
        border-radius: 6px;
        border: 1px solid #ddd;
        font-size: 14px;
        background-color: #fff;
      }

      /* Radio buttons and labels styling */
      .form-check-input {
        margin-right: 10px;
      }

      .form-check-label {
        font-size: 14px;
        color: #555;
      }
      .error-message {
        color: red;
      }
      .body {
        color: white;
      }
      .thumbnails-container {
        display: flex;
        overflow-x: auto;
      }
      .thumbnail {
        margin-right: 10px;
      }

      #cropperContainers {
        margin-top: 10px;
        width: 250px;
      }

      /* #cropperContainer1 {
        display: none;
        margin-top: 20px;
      } */
      .thumbnails-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
      }

      .thumbnail {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 8px;
      }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://upload-widget.cloudinary.com/global/all.js"></script>
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
      rel="stylesheet"
    />
  </head>
  <body>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css"
      rel="stylesheet"
    />
    <%- include("../../views/partials/admin/header") %>

    <section class="content-main">
      <div class="row">
        <div class="col-9">
          <div class="content-header">
            <h2 class="card-title text-center">Add New Product</h2>
          </div>
        </div>
        <div class="col-lg-12">
          <div class="card mb-8">
            <div class="card-body">
              <form id="productForm">
                <div class="mb-8">
                  <label for="product_name" class="form-label"
                    >Product Name</label
                  >
                  <input
                    type="text"
                    placeholder="Type here"
                    name="productName"
                    class="form-control"
                    id="product_name"
                  />
                  <div id="productName-error" class="error-message"></div>
                </div>

                <div class="mb-4">
                  <label class="form-label">Full Description</label>
                  <textarea
                    placeholder="Type here"
                    id="descriptionid"
                    name="description"
                    class="form-control"
                    rows="4"
                  ></textarea>
                  <div id="description-error" class="error-message"></div>
                </div>

                <div class="row">
                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label class="form-label">Regular Price  ( / kg)</label>
                      <input
                        placeholder="₹"
                        name="regularPrice"
                        type="text"
                        class="form-control"
                      />
                      <div id="regularPrice-error" class="error-message"></div>
                    </div>
                  </div>
                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label class="form-label">Sale Price  ( / kg)</label>
                      <input
                        placeholder="₹"
                        name="salePrice"
                        type="text"
                        class="form-control"
                      />
                      <div id="salePrice-error" class="error-message"></div>
                    </div>
                  </div>
                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label class="form-label">Stock</label>
                      <input name="stock" type="text" class="form-control" />
                      <div id="stock" class="error-message"></div>
                    </div>
                  </div>
                  <div class="col-lg-4">
                    <div class="mb-4">
                      <label class="form-label">Color</label>
                      <input name="color" type="text" class="form-control" />
                      <div id="color-error" class="error-message"></div>
                    </div>
                  </div>
                </div>

                <div class="row">
                  <div class="col-lg-2">
                    <label class="form-label">Item</label>
                  </div>
                  <div class="col-lg-4">
                    <div class="mb-4">
                      <input
                        class="form-check-input"
                        type="radio"
                        name="item"
                        id="item1"
                        value="Fruit"
                      />
                      <label class="form-check-label" for="item1">Fruit</label>
                    </div>
                  </div>
                  <div class="col-lg-4">
                    <div class="mb-4">
                      <input
                        class="form-check-input"
                        type="radio"
                        value="Vegetable"
                        id="item2"
                        
                      />
                      <label class="form-check-label" for="item2"
                        >Vegetable</label
                      >
                    </div>
                  </div>
                </div>

                <div class="mb-4">
                  <label class="form-label">Category</label>
                  <select class="form-select" name="category" id="category">
                    <% for (let i = 0; i < cat.length; i++) { %>
                    <option value="<%= cat[i].name %>">
                      <%= cat[i].name %>
                    </option>
                    <% } %>
                  </select>
                  <div id="category-error" class="error-message"></div>
                </div>

                <div class="row">
                  <div class="col-lg-4">
                    <label class="form-label">Status</label>
                  </div>
                  <div class="col-lg-4">
                    <select class="form-select" name="Available" id="category">
                      <option value="Available">Available</option>
                      <option value="Out of Stock">Out of Stock</option>
                      <option value="Removed">Removed</option>
                    </select>
                    <div id="Available-error" class="error-message"></div>
                  </div>
                </div>

                <!-- Image upload section -->
                <div class="row">
                  <div class="col-lg-4">
                    <label class="form-label">Choose Images</label>
                    <input
                      type="file"
                      id="upload"
                      multiple
                      onchange="handleImage(event)"
                      class="form-control"
                    />
                  </div>
                </div>

                <div id="cropperContainers"></div>
                <div
                  id="cropperContainer1"
                  class="crop-container"
                  style="display: none"
                >
                  <img id="cropImage1" alt="Image to crop" />
                  <button
                    type="button"
                    id="saveButton1"
                    class="btn btn-primary mt-2"
                  >
                    Save Cropped Image
                  </button>
                </div>

                <div>
                  <button class="btn btn-md btn-primary" type="submit">
                    ADD PRODUCT
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </section>

    <script>
      const cloudName = "dwwxgavec"; 
      const uploadPreset = "my_images"; 
      let croppers = {};
      let croppedImages = []; 

      const handleImage = (e) => {
        const files = e.target.files; 
        console.log("Selected Files: ", files);

        const cropperContainers = document.getElementById("cropperContainers");
        cropperContainers.innerHTML = "";
        console.log("length",files.length)
        for (let i = 0; i < files.length; i++) {
          const file = files[i];
          const reader = new FileReader();

          const cropperContainer = document.createElement("div");
          cropperContainer.id = `cropperContainer${i}`;
          cropperContainer.style.marginBottom = "20px";
          cropperContainers.appendChild(cropperContainer);

          const img = document.createElement("img");
          img.id = `cropImage${i}`;
          img.style.width = "300px";
          img.style.height = "200px";
          cropperContainer.appendChild(img);

          const saveButton = document.createElement("button");
          saveButton.textContent = "Save Cropped Image";
          saveButton.id = `saveButton${i}`;
          saveButton.setAttribute("type", "button");
          cropperContainer.appendChild(saveButton);

          reader.onload = function () {
            img.src = reader.result;

            if (croppers[i]) {
              croppers[i].destroy();
            }

            croppers[i] = new Cropper(img, {
              aspectRatio: 1, 
              viewMode: 1,
              autoCropArea: 1,
            });

            saveButton.onclick = function () {
              const croppedCanvas = croppers[i].getCroppedCanvas({
                width: 600,
                height: 600,
              });

              croppedCanvas.toBlob(
                function (blob) {
                  const url = URL.createObjectURL(blob);

                  img.src = url; 

                  img.dataset.blob = blob; 
                  croppedImages.push(blob);
                  console.log("Cropped Images Array: ", croppedImages);

                  const croppedImagePreview = document.createElement("img");
                  croppedImagePreview.src = url;
                  croppedImagePreview.style.width = "200px";
                  croppedImagePreview.style.height = "200px";
                  cropperContainer.appendChild(croppedImagePreview);

                  cropperContainer.innerHTML = ""; 
                  cropperContainer.appendChild(croppedImagePreview);

                  const reCropButton = document.createElement("button");
                  reCropButton.textContent = "Re-Crop This Image";
                  reCropButton.setAttribute("type", "button");
                  cropperContainer.appendChild(reCropButton);

                  reCropButton.onclick = function () {
                    img.src = url;
                    croppers[i].destroy();

                    croppers[i] = new Cropper(img, {
                      aspectRatio: 1, 
                      viewMode: 1,
                      autoCropArea: 1,
                    });

                    cropperContainer.innerHTML = "";
                    cropperContainer.appendChild(img); 
                    cropperContainer.appendChild(saveButton); 
                  };
                },
                "image/jpeg",
                0.7
              );
            };
          };

          reader.readAsDataURL(file);
        }
      };

      const uploadImageToCloudinary = (blob) => {
        const formData = new FormData();
        formData.append("file", blob); 
        formData.append("upload_preset", uploadPreset); 
        return fetch(
          `https://api.cloudinary.com/v1_1/${cloudName}/image/upload`,
          {
            method: "POST",
            body: formData,
          }
        )
          .then((response) => response.json())
          .then((data) => {
            const imageUrl = data.secure_url;
            console.log("Uploaded Image URL:", imageUrl);
            return imageUrl;
          })
          .catch((error) => {
            console.error("Error uploading image:", error);
            return null;
          });
      };

      document.getElementById("productForm").onsubmit = async function (event) {
        event.preventDefault();
        //console.log("inside addproduct")
        const productName = document.getElementById("product_name").value;
        const description = document.getElementById("descriptionid").value;
        const regularPrice = parseInt(document.querySelector(
          '[name="regularPrice"]'
        ).value);
        
       

  const salePrice = parseInt(document.querySelector('[name="salePrice"]').value);
if(parseInt( salePrice)>parseInt( regularPrice)){  
  Swal.fire({
          icon: 'error',
          title: 'salesprice must be less than price',
          text: 'salesprice must be less than price'})
return 
}
        const stock = document.querySelector('[name="stock"]').value;
        const color = document.querySelector('[name="color"]').value;
        const Status = document.querySelector('[name="Available"]').value;
        const category = document.getElementById("category").value;
        const radios = document.getElementsByName("item");
        let selectedValue;
        for (const radio of radios) {
          if (radio.checked) {
            selectedValue = radio.value;
            break;
          }
        }
        if(Status=='Available' && stock<=0)
        {
            alert("If no stock please select status 'Out of stock' ")
            return
        }
        if(Status=='Out of Stock' && stock>0 )
        {
            
          
            alert("If 'Out of stock',please set stock to 0 ")
            return
        }
        if(stock <0||salePrice<0||regularPrice<0){
          alert("negative values not allowed")
          return
        }
        const data = {
          productName: productName,
          description: description,
          price: regularPrice,
          salesPrice: salePrice,
          stock: stock,
          color: color,
          category: category,
          item: selectedValue,
        };

        const imageUrls = [];
        for (let i = 0; i < croppedImages.length; i++) {
          const imageUrl = await uploadImageToCloudinary(croppedImages[i]);
          if (imageUrl) {
            imageUrls.push(imageUrl);
          }
        }

        data.images = imageUrls;

        axios
          .post("/admin/addProducts", data, {
            headers: {
              "Content-Type": "application/json",
            },
          })
          .then((response) => {
             Swal.fire({
             icon: 'success',
             title: 'Success',
             text: 'Product Added Successfully!',
        });
            window.location.href = "/admin/products";
          })
          .catch((error) => {
            Swal.fire({
            icon: 'error',
            title: 'Error',
            text: error?.response?.data?.message ||
                error?.message ||
                "Error adding product"
        });
            // alert(
            //   error?.response?.data?.message ||
            //     error?.message ||
            //     "Error adding product"
            // );
          });
        document.getElementById("productForm").reset();
        const imageField = document.getElementById("cropperContainers");
        if (imageField) {
          imageField.value = "";
        }
        imageField.innerHTML = "";
        const croppingPreview = document.getElementById("croppingPreview");

        if (croppingPreview) {
          croppingPreview.src = "";
          croppingPreview.style.display = "none";
        }
      };
    </script>

    <%- include("../../views/partials/admin/footer") %>
  </body>
</html>
