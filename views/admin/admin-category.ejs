<style>
  .inline-form {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        flex-wrap: wrap;
      }
      .inline-form input,
      .inline-form textarea,
      .inline-form button {
        margin: 5px 0;
      }
      .inline-form textarea {
        resize: none;
      }
      .center-container {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 100vh;
      }
      .editable {
        background-color: #fff8c6;
      }
</style>
<%- include("../../views/partials/admin/header") %>

<!-- partial -->
<div class="main-panel">
  <div class="content-wrapper">
    <div class="row">
      <div class="col-12 grid-margin stretch-card">
        <div class="card corona-gradient-card">
          <div class="card-body py-0 px-0 px-sm-3">
            <div class="row align-items-center">
              <div class="col-12 col-sm-12 col-xl-12">
                <h1 style="text-align:center ; font-size: 50px;">Category Details </h1>
              </div>
              </div>
            </div>
          </div>
         </div>
         </div>
          <form action="/admin/searchCategory" method="GET" id=form1 >
          <label for="search">Search Category:</label>
          <input type="text" id="search" name="searchCategory" placeholder="Search by name" required>
          <button type="submit">Search</button>
         </form> 
        
        
         </div>
        
         <div class="container">
          
          <div style="width:100%;justify-items: center;align-content: center;">
              <form id="form2" action="" method="post" class="inline-form" onsubmit="return handleFormSubmit(event)">
                <label for="name">ADD CATEGORY</label>
                <input type="text" id="name" name="name" placeholder="Add Category Name" required style="width: 250px;">
                <textarea id="descriptionId" name="cdescription" rows="2" cols="30" placeholder="Add Description" required style="width: 400px;"></textarea>
                <button type="submit" class="btn btn-danger" style="width: 150px;">
                  Add Category
                </button>
                          
            </div>
          </form>
         <div class="content-wrapper">
           
         <div class="main-panel">
   
        <div class="content-wrapper">
         <div class="row">
        
        <div class="col-lg-12 grid-margin stretch-card">
        <div class="card">
          <div class="card-body">
            <h4 class="card-title">Category Details</h4>
            <div class="table-responsive">
              <table class="table table-hover" border="1">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Listed</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <% if (cat && cat.length > 0) { %>
                  <%for(let i=0;i<cat.length;i++){%> 
                <tr>
                 
                <td><input type="text" class="name-field" value="<%= cat[i].name %>" readonly></td>
                 <td>
                  <textarea class="desc-field" readonly><%= cat[i].description %></textarea>
                </td>
                           
                <td><%if(cat[i].isListed===false){%>
                  <button class="btn btn-danger" style="width: 80px;">
                 <a href="/admin/listCategory?id=<%=cat[i]._id%>" class="text-white" style="text-decoration: none;">List</a>
                 </button>
                   <%}else{%>
                   <button class="btn btn-success" style="width: 80px;">
                   <a href="/admin/unlistCategory?id=<%=cat[i]._id%>" class="text-white" style="text-decoration: none;">UnList</a>
                   </button>
                   <%}%> 
                </td>
                 <td>
                  <button class="btn btn-warning edit-btn" onclick="enableEdit(this.closest('tr'), '<%= cat[i]._id %>')">Edit</button>
                                  
                    <button class="btn btn-danger delete-btn" onclick="softDeleteCategory(this.closest('tr'), '<%= cat[i]._id %>')">Delete</button>
                  
                  
                   </td>
                     </tr>                         
                    <% } }else { %>
                      <tr>
                        <td colspan="5">No categories found</td>
                     </tr>
                    <% } %>
                         
                      </tbody>
                  </table>                      
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>
</div>
</div>



</div>
<!-- main-panel ends -->
</div>
<!-- page-body-wrapper ends -->
</div>
<div class="container mt-3">
<nav aria-label="Page navigation">
  <ul class="pagination justify-content-center mb-20" style="margin-right: 200px;">
 <%for(let i=1;i<=totalPages;i++){%>
  <li class="page-item <%=(i===currentPage) ? 'active' : '' %>">
      <a class="page-link" href="?page=<%= i %>"><%= i %></a>
  </li>
  <%}%>
  </ul>
</nav>
</div>



   <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
   <script>


document.getElementById("form2").addEventListener('submit', function(event) {
  event.preventDefault();
  console.log("fewfdfsdfsdfsdfsdf")
  handleFormSubmit(event)
})

   function handleFormSubmit(event) {
    event.preventDefault();
  //  console.log("fewfdfsdfsdfsdfsdf")
    if (!validateForm()) {
      return false;
    }
    const name = document.getElementsByName("name")[0].value;
    const description = document.getElementById("descriptionId").value;
    
    fetch('/admin/addCategory', {
      method: 'post',
      headers: {
        'content-type': 'application/json'
      },
      body: JSON.stringify({ name, description })
    })
    .then(response => {
      if (!response.ok) {
        return response.json().then(err => {
          throw new Error(err.error);
        });
      }
      return response.json();
    })
    .then(data => {
      location.reload();
    })
    .catch(error => {
      Swal.fire({
        icon: 'error',
        title: "OOPS",
        text: error.message === "Category already exists" ? "Category already exists" : "An error occurred while entering category",
      timer:5000
      });
      location.reload();
    });
    document.getElementsByName("name")[0].innerHTML="";
    document.getElementById("descriptionId").innerHTML="";
  }
  
  function validateForm() {
    clearErrorMessages();
    const name = document.getElementsByName("name")[0].value.trim();
    const description = document.getElementById("descriptionId").value.trim();
    let isValid = true;
  
    if (name === "") {
      displayErrorMessage("name-error", "Please enter a name");
      isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
      displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
      isValid = false;
    }
  
    if (description === "") {
      displayErrorMessage("description-error", "Please enter a description");
      isValid = false;
    }
  
    return isValid;
  }
  
  function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
      errorElement.innerText = message;
      errorElement.style.display = "block";
    }
  }
  
  function clearErrorMessages() {
    const errorElements = document.getElementsByClassName("error-message");
    Array.from(errorElements).forEach((element) => {
      element.innerText = "";
      element.style.display = "none";
    });
  }


  function enableEdit(row, categoryId) {
    const nameField = row.querySelector('.name-field');
    const descField = row.querySelector('.desc-field');
    const editButton = row.querySelector('.edit-btn');
    
    
    if (editButton.textContent === 'Edit') {
      nameField.removeAttribute('readonly');
      descField.removeAttribute('readonly');
      descField.classList.add('editable');
      editButton.textContent = 'Update';
      editButton.classList.remove('btn-warning');
      editButton.classList.add('btn-success');
    } else {
      const updatedName = nameField.value;
      const updatedDescription = descField.value;
      
      fetch(`/admin/editCategory/${categoryId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name: updatedName, description: updatedDescription })
      })
      .then(response => {
        if (!response.ok) {
          return response.json().then(err => {
            throw new Error(err.error);
          });
        }
        return response.json();
      })
      .then(data => {
        Swal.fire({
          icon: 'success',
          title: 'Success',
          text: 'Category Updated Successfully!',
        });
        nameField.setAttribute('readonly', 'readonly');
        descField.setAttribute('readonly', 'readonly');
        descField.classList.remove('editable');
        editButton.textContent = 'Edit';
        editButton.classList.remove('btn-success');
        editButton.classList.add('btn-warning');
      })
      .catch(error => {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: error.message || 'An error occurred while updating category',
        });
      });
    }
}


function softDeleteCategory(row,categoryId) {
  const nameField = row.querySelector('.name-field').value;
 // const categoryId=row.querySelector('.id-field').value;
  alert(categoryId)
  alert("inside ejs")
  //alert(nameField)
  //console.log(categoryId)
  console.log('Category ID:', categoryId);
console.log('Name Field:', nameField);


  Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: 'Yes, delete it!'
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/admin/deleteCategory/${categoryId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        
        body: JSON.stringify({_id:categoryId, name: nameField})
      })
      .then(response => response.json())
      .then(data => {
        Swal.fire(
          'Deleted!',
          'Category has been deleted.',
          'success'
        );
       // row.style.opacity = '0.5';  // Visual feedback (dim the row)
        window.location.href = '/admin/category';
      })
      .catch(error => {
        Swal.fire(
          'Error!',
          'An error occurred while deleting category.',
          'error'
        );
      });
    }
  });
}







</script>
