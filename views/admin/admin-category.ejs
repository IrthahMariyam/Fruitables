<head>
 
</head>
<%- include("../../views/partials/admin/header") %> 
 
<div class="main-panel">
  <div class="content-wrapper">
    <div class="row">
      <div class="col-lg-12 grid-margin stretch-card">
        <div class="card">
          <div class="card-body">
            <h2 class="card-title text-center">Category Details</h2>
          <form action="/admin/searchCategory" method="GET" id=form1 class="search-form mb-4" >
            <div class="input-group">
             <input type="text" id="search" name="searchCategory" placeholder="Search by name"  class="form-control" required>
          <button type="submit">Search</button>
            </div>
        </form> 
        <div>
         <form id="form2" action="" method="post" class="search-form mb-4" onsubmit="return handleFormSubmit(event)">
       
          
          <input type="text" id="name" name="name" placeholder="Add Category Name" required style="width: 250px;" class="form-control">
          <textarea id="descriptionId" name="cdescription" rows="3" cols="30" placeholder="Add Description" required style="width: 400px;"  class="form-control"></textarea>
          <button type="submit"  class="btn btn-primary">
            Add Category
          </button>
           
    </form>
  </div>
    <div class="table-responsive">
      <table class="table table-hover" border="1">
        <thead>
          <tr>
            <th>Name</th>
            <th>Description</th>
            <th>Listed</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          <% if (cat && cat.length > 0) { %>
          <%for(let i=0;i<cat.length;i++){%> 
        <tr>
         
        <td><input type="text" class="name-field border-0" value="<%= cat[i].name %>" readonly></td>
         <td>
          <textarea class="desc-field border-0" readonly rows="3" cols="50"><%= cat[i].description %></textarea>
        </td>
                   
        <td><%if(cat[i].isListed===false){%>
          <button class="btn btn-danger" style="width: 80px;">
         <a href="/admin/listCategory?id=<%=cat[i]._id%>" class="text-white" style="text-decoration: none;">List</a>
         </button>
           <%}else{%>
           <button class="btn btn-success" style="width: 80px;">
           <a href="/admin/unlistCategory?id=<%=cat[i]._id%>" class="text-white" style="text-decoration: none;">UnList</a>
           </button>
           <%}%> 
        </td>
         <td>
          <button class="btn btn-warning edit-btn" onclick="enableEdit(this.closest('tr'), '<%= cat[i]._id %>')">Edit</button>
                          
            <button class="btn btn-danger delete-btn" onclick="softDeleteCategory(this.closest('tr'), '<%= cat[i]._id %>')">Delete</button>
          
          
           </td>
             </tr>                         
            <% } }else { %>
              <tr>
                <td colspan="5">No categories found</td>
             </tr>
            <% } %>
                 
              </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>
</div>
<ul class="pagination justify-content-center mb-20" style="margin-right: 200px;">
  <%for(let i=1;i<=totalPages;i++){%>
   <li class="page-item <%=(i===currentPage) ? 'active' : '' %>">
       <a class="page-link" href="?page=<%= i %>"><%= i %></a>
   </li>
   <%}%>
   </ul>

</div>

   <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
   <script>


document.getElementById("form2").addEventListener('submit', function(event) {
  event.preventDefault();
  console.log("fewfdfsdfsdfsdfsdf")
  handleFormSubmit(event)
})

   function handleFormSubmit(event) {
    event.preventDefault();
  //  console.log("fewfdfsdfsdfsdfsdf")
    if (!validateForm()) {
      return false;
    }
    const name = document.getElementsByName("name")[0].value;
    const description = document.getElementById("descriptionId").value;
    
    fetch('/admin/addCategory', {
      method: 'post',
      headers: {
        'content-type': 'application/json'
      },
      body: JSON.stringify({ name, description })
    })
    .then(response => {
      if (!response.ok) {
        return response.json().then(err => {
          throw new Error(err.error);
        });
      }
      return response.json();
    })
    .then(data => {
      location.reload();
    })
    .catch(error => {
      Swal.fire({
        icon: 'error',
        title: "OOPS",
        text: error.message === "Category already exists" ? "Category already exists" : "An error occurred while entering category",
      timer:5000
      });
      location.reload();
    });
    document.getElementsByName("name")[0].innerHTML="";
    document.getElementById("descriptionId").innerHTML="";
  }
  
  function validateForm() {
    clearErrorMessages();
    const name = document.getElementsByName("name")[0].value.trim();
    const description = document.getElementById("descriptionId").value.trim();
    let isValid = true;
  
    if (name === "") {
      displayErrorMessage("name-error", "Please enter a name");
      isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
      displayErrorMessage("name-error", "Category name should contain only alphabetic characters");
      isValid = false;
    }
  
    if (description === "") {
      displayErrorMessage("description-error", "Please enter a description");
      isValid = false;
    }
  
    return isValid;
  }
  
  function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
      errorElement.innerText = message;
      errorElement.style.display = "block";
    }
  }
  
  function clearErrorMessages() {
    const errorElements = document.getElementsByClassName("error-message");
    Array.from(errorElements).forEach((element) => {
      element.innerText = "";
      element.style.display = "none";
    });
  }


  function enableEdit(row, categoryId) {
    const nameField = row.querySelector('.name-field');
    const descField = row.querySelector('.desc-field');
    const editButton = row.querySelector('.edit-btn');
    
    
    if (editButton.textContent === 'Edit') {
      nameField.removeAttribute('readonly');
      descField.removeAttribute('readonly');
      descField.classList.add('editable');
      editButton.textContent = 'Update';
      editButton.classList.remove('btn-warning');
      editButton.classList.add('btn-success');
    } else {
      const updatedName = nameField.value;
      const updatedDescription = descField.value;
      
      fetch(`/admin/editCategory/${categoryId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name: updatedName, description: updatedDescription })
      })
      .then(response => {
        if (!response.ok) {
          return response.json().then(err => {
            throw new Error(err.error);
          });
        }
        return response.json();
      })
      .then(data => {
        Swal.fire({
          icon: 'success',
          title: 'Success',
          text: 'Category Updated Successfully!',
        });
        nameField.setAttribute('readonly', 'readonly');
        descField.setAttribute('readonly', 'readonly');
        descField.classList.remove('editable');
        editButton.textContent = 'Edit';
        editButton.classList.remove('btn-success');
        editButton.classList.add('btn-warning');
      })
      .catch(error => {
        Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: error.message || 'An error occurred while updating category',
        });
      });
    }
}

function softDeleteCategory(row,categoryId) {
  const nameField = row.querySelector('.name-field').value;
 // const categoryId=row.querySelector('.id-field').value;
  alert(categoryId)
  alert("inside ejs")
  //alert(nameField)
  //console.log(categoryId)
  console.log('Category ID:', categoryId);
console.log('Name Field:', nameField);


  Swal.fire({
    title: 'Are you sure?',
    text: "You won't be able to revert this!",
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#3085d6',
    confirmButtonText: 'Yes, delete it!'
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/admin/deleteCategory/${categoryId}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        
        body: JSON.stringify({_id:categoryId, name: nameField})
      })
      .then(response => response.json())
      .then(data => {
        Swal.fire(
          'Deleted!',
          'Category has been deleted.',
          'success'
        );
       // row.style.opacity = '0.5';  // Visual feedback (dim the row)
        window.location.href = '/admin/category';
      })
      .catch(error => {
        Swal.fire(
          'Error!',
          'An error occurred while deleting category.',
          'error'
        );
      });
    }
  });
}







</script>


