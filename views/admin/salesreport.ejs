<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/style.css" />
    <title>Admin Dashboard</title>
    
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <style>
      
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }
      body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4 !important;
      }
      a {
        text-decoration: none;
      }

      
      .navbar {
        background-color: #84cbcb;
      }
      .navbar-brand {
        color: #fff;
        font-weight: bold;
      }

      
      .sidebar {
        width: 20%;
        height: 100%;
        background-color: rgb(231, 248, 232);
        background-color: rgb(231, 248, 232);
        padding: 10px;
      }
      .sidebar ul {
        list-style-type: none;
        padding: 0;
      }
      .sidebar ul li {
        margin-bottom: 5px;
      }
      .sidebar ul li a {
        color: #333;
        font-size: 16px;
        display: block;
      }
      .sidebar ul li a:hover {
        color: #28a745;
        font-weight: bold;
      }

      
      .content {
        margin-top: 100px;
        width: 80%;
        padding: 20px;
        background-color: #f4f4f4;
      }
      .card-custom {
        background-color: #84cbcb;
        color: #fff;
        border: none;
      }
      .form-custom label {
        font-weight: bold;
      }

      
      .stats-card {
        background-color: #28a745;
        color: white;
        text-align: center;
        padding: 10px;
        border-radius: 5px;
        margin: 5px;
      }
      .stats-card h3 {
        font-size: 24px;
        margin-bottom: 5px;
      }
      .stats-card p {
        font-size: 14px;
      }
      .small-text {
        font-size: 12px;
      }
      

      

      .sales-report-container {
        width: 100%;
        max-width: 1200px;
        margin: 20px auto;
        padding: 20px;
        background: #ffffff;
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        overflow-x: auto;
      }

      
      .report-filter-section {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 10px;
        margin-bottom: 15px;
        flex-wrap: wrap;
        background: #ffffff;
      }

      
      .report-filter-section select,
      .report-filter-section input {
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 14px;
      }

      
      .generate-report-btn {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 5px;
        font-weight: bold;
        transition: background 0.3s;
      }

      .generate-report-btn:hover {
        background-color: #218838;
      }

      
      .sales-report-table {
        width: 100%;
        border-collapse: collapse;
        font-family: "Arial", sans-serif;
        table-layout: fixed;
      }

      .sales-report-table th,
      .sales-report-table td {
        padding: 12px;
        text-align: left;
        border-bottom: 1px solid #ddd;
      }

      .sales-report-table thead {
        background-color: #28a745;
        color: white;
      }
      .sales-report-table th {
        background-color: #28a745; 
        color: white;
        font-weight: bold;
      }

      .sales-report-table tbody tr:hover {
        background-color: #f2f2f2;
      }

      
      .download-buttons {
        margin-top: 15px;
        display: flex;
        justify-content: center;
        gap: 10px;
      }

      .download-buttons button {
        background-color: #28a745;
        color: white;
        border: none;
        padding: 10px 15px;
        cursor: pointer;
        border-radius: 5px;
        font-weight: bold;
        transition: background 0.3s;
      }

      .download-buttons button:hover {
        background-color: #218838;
      }

      
      @media (max-width: 768px) {
        .report-filter-section {
          flex-direction: column;
          align-items: stretch;
        }

        .download-buttons {
          flex-direction: column;
          align-items: center;
        }
      }
    </style>
  </head>
  <body>
    
    <%- include("../../views/partials/admin/header.ejs")%>

    <div class="main-panel">
      <div class="content-wrapper" style="background-color: #f2f2f2">
        <div class="row">
          <div class="col-lg-12 grid-margin stretch-card">
            <div class="card background-color:white">
              <div class="card-body">
                <h2 class="card-title text-center text-dark">DASHBOARD</h2>
               
                <div class="row mb-4">
                  <div class="col-md-4">
                    <div class="stats-card">
                      <h3><%= users.length %></h3>
                      <p>Total Users</p>
                    </div>
                  </div>
                  <div class="col-md-4">
                    <div class="stats-card">
                      <h3><%= products.length %></h3>
                      <p>Total Products</p>
                    </div>
                  </div>
                  <div class="col-md-4">
                    <div class="stats-card">
                      <h3><%= orders.length %></h3>
                      <p>Total Orders</p>
                    </div>
                  </div>
                  <div class="col-md-4">
                    <div class="stats-card">
                      <h3><%= deliveredOrdersCount %></h3>
                      <p>Sales Count</p>
                    </div>
                  </div>
                  <div class="col-md-4">
                    <div class="stats-card">
                      <h3><%=revenueAmount.toFixed(2) %></h3>
                      <p>Overall Revenue</p>
                    </div>
                  </div>
                  <div class="col-md-4">
                    <div class="stats-card">
                      <h3><%= totalDiscount %></h3>
                      <p>Overall Discount</p>
                    </div>
                  </div>
                  <div class="col-md-4">
                    <div class="stats-card">
                      <h3><%= totalDailySales %></h3>
                      <p>Sales Today</p>
                    </div>
                  </div>
                  <div class="col-md-4">
                    <div class="stats-card">
                      <h3><%= totalWeeklySales %></h3>
                      <p>Sales in this week</p>
                    </div>
                  </div>
                  <div class="col-md-4">
                    <div class="stats-card">
                      <h3><%= totalMonthlySales %></h3>
                      <p>Sales In this Month</p>
                    </div>
                  </div>
                </div>
                <div style="background-color: whitesmoke">
                  <div class="sales-report-container">
                    <!-- Filter Section -->
                    <div class="report-filter-section">
                      <select id="filter" onchange="toggleDateFields()">
                        <option>Select</option>
                        <option value="daily">Daily</option>
                        <option value="weekly">Weekly</option>
                        <option value="monthly">Monthly</option>
                        <option value="yearly">Yearly</option>
                        <option value="custom">Custom</option>
                      </select>
                      <div id="date-range" style="display: none">
                        <label for="startdate">Start Date :</label>
                        <input type="date" id="start-date" />
                        <label for="enddate">End Date :</label>
                        <input type="date" id="end-date" />
                      </div>

                      <button
                        class="generate-report-btn"
                        onclick="fetchSalesReport()"
                      >
                        Generate Report
                      </button>
                    </div>

                    
                    <table class="sales-report-table">
                      <thead>
                        <tr>
                          <th>Order ID</th>
                          <th>Customer Name</th>
                          <th>Total Amount</th>
                          <th>Discount</th>
                          <th>Payable Amount</th>
                          <th>Date</th>
                        </tr>
                      </thead>
                      <tbody>
                       
                      </tbody>
                    </table>

                   
                    <div class="download-buttons">
                      <button onclick="downloadPDF()">Download PDF</button>
                      <button onclick="downloadExcel()">Download Excel</button>
                    </div>
                  </div>
                  
                  <!-- Chart Section -->
                  <div style="margin-top: 20px">
                    <h4>Sales Overview</h4>
                    <div style="margin-bottom: 15px">
                      <label for="salesChartType">Chart Type: </label>
                      <select id="salesChartType">
                        <option value="line">Line</option>
                        <option value="bar">Bar</option>
                        <option value="pie">Pie</option>
                      </select>
                    </div>

                    <div
                      style="
                        position: relative;
                        height: 400px;
                        width: 100%;
                        max-width: 1000px;
                      "
                    >
                      <canvas id="salesChart"></canvas>
                    </div>
                  </div>
                </div>

                <!-- Cancelled and Returned Orders Section -->
                <div class="sales-report-container">
                  <h4>Cancelled and Returned Orders</h4>
                  <!-- Filter Section -->
                  <div class="report-filter-section">
                    <select
                      id="cancelReturnFilter"
                      onchange="toggleCancelReturnDateFields()"
                    >
                      <option>Select</option>
                      <option value="daily">Daily</option>
                      <option value="weekly">Weekly</option>
                      <option value="monthly">Monthly</option>
                      <option value="yearly">Yearly</option>
                      <option value="custom">Custom</option>
                    </select>
                    <div id="cancel-return-date-range" style="display: none">
                      <label for="cancel-start-date">Start Date :</label>
                      <input type="date" id="cancel-start-date" />
                      <label for="cancel-end-date">End Date :</label>
                      <input type="date" id="cancel-end-date" />
                    </div>
                    <button
                      class="generate-report-btn"
                      onclick="fetchCancelReturnReport()"
                    >
                      Generate Report
                    </button>
                  </div>

                  <!-- Cancelled/Returned Orders Table -->
                  <table class="sales-report-table">
                    <thead>
                      <tr>
                        <th>Date</th>
                        <th>Order ID</th>
                        <th>Product Name</th>
                        <th>Customer Name</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="cancelReturnTableBody">
                      
                    </tbody>
                  </table>

                 
                  <div class="download-buttons">
                    <button onclick="downloadCancelReturnPDF()">
                      Download PDF
                    </button>
                    <button onclick="downloadCancelReturnExcel()">
                      Download Excel
                    </button>
                  </div>
                </div>

                
                <!-- chart -->
                <h4 style="margin-left: 50px">Top Selling Products</h4>

                <div style="height: 400px; display: flex; gap: 50px">
                  <div>
                    <!-- Filter Controls -->
                    <div style="margin-left: 50px">
                      <label for="filter">Filter by: </label>
                      <select id="filter1">
                        <option value="daily">Daily</option>
                        <option value="weekly">Weekly</option>
                        <option value="monthly">Monthly</option>
                        <option value="yearly">Yearly</option>
                      </select>

                      <label for="chartType">Chart Type: </label>
                      <select id="chartType1">
                        <option value="line">Line</option>
                        <option value="bar">Bar</option>
                        <option value="pie">Pie</option>
                      </select>
                    </div>

                    <!-- Chart Display -->

                    <canvas
                      id="topSellingChart"
                      width="600px"
                      height="400px"
                    ></canvas>
                  </div>
                  <div style="height: 400px">
                    <h4>Top Selling Products</h4>

                    
                    <table
                      id="topSellingProductsTable"
                      cellpadding="5"
                      cellspacing="10"
                      style="border: 1"
                    >
                      <thead>
                        <tr style="text-align: left">
                          <th style="padding: 8px; border: 1px solid">
                            Product Name
                          </th>
                          <th style="padding: 8px; border: 1px solid">
                            Total Sold
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                       
                      </tbody>
                    </table>
                  </div>
                </div>

              

                <div style="height: 400px; margin-top: 100px; display: flex">
                  <div style="margin-left: 50px">
                    <h4>Top Categories</h4>
                    <label for="filter">Filter by: </label>

                    <select id="filter2">
                      <option value="daily">Daily</option>
                      <option value="weekly">Weekly</option>
                      <option value="monthly">Monthly</option>
                      <option value="yearly">Yearly</option>
                    </select>

                    <label for="chartType">Chart Type: </label>

                    <select id="chartType2">
                      <option value="line">Line</option>
                      <option value="bar">Bar</option>
                      <option value="pie">Pie</option>
                    </select>

                    <canvas
                      id="topCategoriesChart"
                      width="600"
                      height="400"
                    ></canvas>
                  </div>
                  <div
                    style="height: 400px; margin-top: 100px; padding-left: 20px"
                  >
                    <h4>Top Categories</h4>

                   
                    <table
                      id="topSellingCategoriesTable"
                      cellpadding="5"
                      cellspacing="0"
                      style="
                        border-collapse: collapse;
                        width: 100%;
                        margin: 20px 0;
                      "
                    >
                      <thead>
                        <tr style="text-align: left">
                          <th style="padding: 8px; border: 1px solid">
                            Category Name
                          </th>
                          <th style="padding: 8px; border: 1px solid">
                            Total Sold
                          </th>
                        </tr>
                      </thead>
                      <tbody>
                        
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

  

    <%-include("../../views/partials/admin/footer")%>

   
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
     
      function toggleDateFields() {
        const filter = document.getElementById("filter").value;
        const dateRange = document.getElementById("date-range");

        if (filter === "custom") {
          dateRange.style.display = "block";
        } else {
          dateRange.style.display = "none";
        }
      }

     
      function disableFutureDates() {
        const today = new Date().toISOString().split("T")[0]; 

        document.getElementById("start-date").setAttribute("max", today);
        document.getElementById("end-date").setAttribute("max", today);
      }

      
      document.addEventListener("DOMContentLoaded", disableFutureDates);

      function updateSalesTable(reportData) {
        const tbody = document.querySelector(".sales-report-table tbody");
        tbody.innerHTML = "";

        if (reportData.length === 0) {
          tbody.innerHTML = "<tr><td colspan='6'>No sales data found</td></tr>";
          return;
        }

        reportData.forEach((order) => {
          const row = document.createElement("tr");
          row.innerHTML = `
            <td>${order.orderId || "N/A"}</td>
            <td>${order.customerName || "Unknown"}</td>
            <td>${order.TotalAmount.toFixed(2)}
            <td>${order.discount.toFixed(2)}</td>
            <td>${order.PayableAmount.toFixed(2)}</td>           
            <td>${order.date}</td> 
        `;
          tbody.appendChild(row);
        });
      }

      document
        .getElementById("filter")
        .addEventListener("change", fetchSalesReport);

      function downloadPDF() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        
        doc.setFont("helvetica", "bold");
        doc.setFontSize(18);
        doc.text("Sales Report", doc.internal.pageSize.getWidth() / 2, 15, {
          align: "center",
        });

        
        doc.setFontSize(12);
        doc.setFont("helvetica", "normal");
        const today = new Date();
        doc.text(
          "Generated: " + today.toLocaleDateString(),
          doc.internal.pageSize.getWidth() / 2,
          22,
          { align: "center" }
        );

        const rows = [];
        document
          .querySelectorAll(".sales-report-table tbody tr")
          .forEach((row) => {
            const rowData = [];
            row
              .querySelectorAll("td")
              .forEach((cell) => rowData.push(cell.innerText));

            rows.push(rowData);
          });

        
        doc.autoTable({
          head: [
            [
              "Order ID",
              "Customer Name",
              "Total Amount",
              "Discount",
              "Payable Amount",
              "Date",
            ],
          ],
          body: rows,
          startY: 30,
          styles: {
            fontSize: 10,
            font: "helvetica",
            cellPadding: 5,
          },
          headStyles: {
            fillColor: [40, 167, 69], 
            textColor: [255, 255, 255],
            fontStyle: "bold",
            halign: "left",
          },
          alternateRowStyles: {
            fillColor: [245, 245, 245],
          },
          columnStyles: {
            0: { cellWidth: 30 }, 
            1: { cellWidth: 30 },
            2: { cellWidth: 30 },
            3: { cellWidth: 30 },
            4: { cellWidth: 30 },
            5: { cellWidth: 30 },
          },
        });

        doc.save("Sales_Report.pdf");
      }

      function downloadExcel() {
        const table = document.querySelector(".sales-report-table");
        const ws = XLSX.utils.table_to_sheet(table);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Sales Report");
        XLSX.writeFile(wb, "Sales_Report.xlsx");
      }

      

      const topSellingChartCanvas = document.getElementById("topSellingChart");
      let topSellingChart;

      async function updateTopSellingChart() {
        const filter = document.getElementById("filter1").value;
        const chartType = document.getElementById("chartType1").value;

        const response = await fetch(
          `/admin/top-selling-products?filter=${filter}`
        );
        const data = await response.json();

        const productNames = data.map((item) => item.productName);
        const totalSold = data.map((item) => item.totalSold);

        if (topSellingChart) {
          topSellingChart.destroy();
        }

        topSellingChart = new Chart(topSellingChartCanvas, {
          type: chartType,
          data: {
            labels: productNames, 
            datasets: [
              {
                label: "Total Sold",
                data: totalSold, 
                borderColor: "rgba(33, 136, 56, 1)",
                backgroundColor:
                  chartType === "pie"
                    ? "rgba(33, 136, 56, .8)"
                    : "rgba(33, 136, 56, .8)",
                fill: chartType !== "line", 
                tension: 0.4,
                pointRadius: 3,
                pointHoverRadius: 7,
                cubicInterpolationMode: "monotone",
              },
            ],
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales:
              chartType === "line"
                ? {
                    y: { beginAtZero: true },
                  }
                : undefined,
            plugins: {
              legend: {
                display: true, 
              },
            },
            scales: {
              x: {
                ticks: {
                  display: true, 
                },
              },
            },
          },
        });
      }

     
      document.addEventListener("DOMContentLoaded", () => {
        updateTopSellingChart();
      });

      document
        .getElementById("filter1")
        .addEventListener("change", updateTopSellingChart);
      document
        .getElementById("chartType1")
        .addEventListener("change", updateTopSellingChart);

     

      const topCategoriesChartCanvas =
        document.getElementById("topCategoriesChart");
      let topCategoriesChart;

      async function updateTopCategoriesChart() {
        const filter = document.getElementById("filter2").value;
        const chartType = document.getElementById("chartType2").value;

        const response = await fetch(
          `/admin/top-selling-categories?filter=${filter}`
        );
        const data = await response.json();

        const categoryNames = data.map((item) => item.categoryName);
        const totalSold = data.map((item) => item.totalSold);

        if (topCategoriesChart) {
          topCategoriesChart.destroy();
        }

        topCategoriesChart = new Chart(topCategoriesChartCanvas, {
          type: chartType, 
          data: {
            labels: categoryNames, 
            datasets: [
              {
                label: "Total Sold",
                data: totalSold,
                borderColor: "rgba(33, 136, 56, 1)",
                backgroundColor:
                  chartType === "pie"
                    ? "rgba(33, 136, 56, .8)"
                    : "rgba(33, 136, 56, .8)",
                fill: chartType !== "line", 
                tension: 0.4, 
                pointRadius: 3,
                pointHoverRadius: 7, 
                cubicInterpolationMode: "monotone",
              },
            ],
          },
          options: {
            responsive: true,
            maintainAspectRatio: false, 
            scales:
              chartType === "line"
                ? {
                    y: { beginAtZero: true },
                  }
                : undefined,
            plugins: {
              legend: {
                display: false, 
              },
            },
            scales: {
              x: {
                ticks: {
                  display: true, 
                },
              },
            },
          },
        });
      }

     
      document.addEventListener("DOMContentLoaded", () => {
        updateTopCategoriesChart();
      });

      document
        .getElementById("filter2")
        .addEventListener("change", updateTopCategoriesChart);
      document
        .getElementById("chartType2")
        .addEventListener("change", updateTopCategoriesChart);

     
      async function updateTopSellingProductsTable() {
        const filter = document.getElementById("filter1").value;

        const response = await fetch(
          `/admin/top-selling-products?filter=${filter}`
        );
        const data = await response.json();

        const productNames = data.map((item) => item.productName);
        const totalSold = data.map((item) => item.totalSold);

        const tableBody = document
          .getElementById("topSellingProductsTable")
          .getElementsByTagName("tbody")[0];

        tableBody.innerHTML = ""; 

        productNames.forEach((productName, index) => {
          const row = tableBody.insertRow();

          
          row.style.border = "1px solid black";

          const cell1 = row.insertCell(0);
          const cell2 = row.insertCell(1);

          
          cell1.style.border = "1px solid black";
          cell2.style.border = "1px solid black";

         
          cell1.style.padding = "8px";
          cell2.style.padding = "8px";

         
          cell1.textContent = productName;
          cell2.textContent = totalSold[index];
        });
      }

      
      async function updateTopCategoriesTable() {
        const filter = document.getElementById("filter2").value;

        const response = await fetch(
          `/admin/top-selling-categories?filter=${filter}`
        );
        const data = await response.json();

        const categoryNames = data.map((item) => item.categoryName);
        const totalSold = data.map((item) => item.totalSold);

        const tableBody = document
          .getElementById("topSellingCategoriesTable")
          .getElementsByTagName("tbody")[0];

        tableBody.innerHTML = "";

        categoryNames.forEach((categoryName, index) => {
          const row = tableBody.insertRow();
          row.style.border = "1px solid black";
          const cell1 = row.insertCell(0);
          const cell2 = row.insertCell(1);
          cell1.style.border = "1px solid black";
          cell2.style.border = "1px solid black";
          cell1.style.padding = "8px";
          cell2.style.padding = "8px";
          cell1.textContent = categoryName;
          cell2.textContent = totalSold[index];
        });
      }

     
      document.getElementById("filter1").addEventListener("change", () => {
        updateTopSellingProductsTable();
      });

      document.getElementById("filter2").addEventListener("change", () => {
        updateTopCategoriesTable();
      });

      
      document.addEventListener("DOMContentLoaded", () => {
        updateTopSellingProductsTable();
        updateTopCategoriesTable();
      });

     
      let salesChart;

      async function updateSalesChart() {
        const filter = document.getElementById("filter").value;
        const chartType = document.getElementById("salesChartType").value;
        const startDate = document.getElementById("start-date").value;
        const endDate = document.getElementById("end-date").value;

        let url = `/admin/sales-report?filter=${filter}`;
        if (filter === "custom" && startDate && endDate) {
          url += `&startDate=${startDate}&endDate=${endDate}`;
        }

        try {
          const response = await fetch(url);
          const data = await response.json();

         

          if (data.success && data.chartData && data.chartData.length > 0) {
            const labels = data.chartData.map((entry) => entry._id); 
            const payableAmounts = data.chartData.map(
              (entry) => entry.totalAmount
            ); // Total sales per day


            // Destroy existing chart if it exists
            if (salesChart) {
              salesChart.destroy();
            }

            const ctx = document.getElementById("salesChart").getContext("2d");
            salesChart = new Chart(ctx, {
              type: chartType,
              data: {
                labels: labels,
                datasets: [
                  {
                    label: "Total Sales Per Day",
                    data: payableAmounts,
                    backgroundColor:
                      chartType === "pie"
                        ? "rgba(40, 167, 69, 0.8)"
                        : "rgba(40, 167, 69, 0.2)",
                    borderColor: "rgba(40, 167, 69, 1)",
                    borderWidth: 1,
                    fill: chartType === "line",

                    tension: 0.4,
                    pointRadius: 3,
                    pointHoverRadius: 7,
                    cubicInterpolationMode: "monotone",
                  },
                ],
              },
              options: {
                responsive: true,
                maintainAspectRatio: false,
                scales:
                  chartType !== "pie"
                    ? {
                        y: {
                          beginAtZero: true,
                          title: { display: true, text: "Amount" },
                        },
                        x: {
                          title: { display: true, text: "Date" },
                        },
                      }
                    : undefined,
                plugins: {
                  legend: { display: chartType !== "pie" },
                },
              },
            });
          } else {
          
            const ctx = document.getElementById("salesChart").getContext("2d");
            ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height); // Clear canvas if no data
            if (salesChart) {
              salesChart.destroy();
            }
          }
        } catch (error) {
         
        }
      }

      // Modified fetchSalesReport to update both table and chart
      async function fetchSalesReport() {
        const filter = document.getElementById("filter").value;
        const startDate = document.getElementById("start-date").value;
        const endDate = document.getElementById("end-date").value;

        let url = `/admin/sales-report?filter=${filter}`;
        if (filter === "custom" && startDate && endDate) {
          url += `&startDate=${startDate}&endDate=${endDate}`;
        }

        try {
          const response = await fetch(url);
          const data = await response.json();

          if (data.success) {
            updateSalesTable(data.reportData);
            updateSalesChart(); // Update chart with the same data
          } else {
          
          }
        } catch (error) {
          console.error("Error fetching sales report:", error);
        }
      }

      // Sync chart filter with table filter
      document.getElementById("filter").addEventListener("change", function () {
        document.getElementById("filter").value = this.value;
        fetchSalesReport();
      });

      // Event listeners for chart-specific filters
      document
        .getElementById("filter")
        .addEventListener("change", updateSalesChart);
      document
        .getElementById("salesChartType")
        .addEventListener("change", updateSalesChart);

      // Initial load
      document.addEventListener("DOMContentLoaded", () => {
        fetchSalesReport(); // Load table and chart on page load
      });

      // Toggle date fields for cancelled/returned report
      function toggleCancelReturnDateFields() {
        const filter = document.getElementById("cancelReturnFilter").value;
        const dateRange = document.getElementById("cancel-return-date-range");

        if (filter === "custom") {
          dateRange.style.display = "block";
        } else {
          dateRange.style.display = "none";
        }
      }

      // Disable future dates for cancelled/returned date inputs
      function disableCancelReturnFutureDates() {
        const today = new Date().toISOString().split("T")[0];
        document.getElementById("cancel-start-date").setAttribute("max", today);
        document.getElementById("cancel-end-date").setAttribute("max", today);
      }

      document.addEventListener(
        "DOMContentLoaded",
        disableCancelReturnFutureDates
      );

      // Fetch cancelled/returned orders report
      async function fetchCancelReturnReport() {
        const filter = document.getElementById("cancelReturnFilter").value;
        const startDate = document.getElementById("cancel-start-date").value;
        const endDate = document.getElementById("cancel-end-date").value;

        let url = `/admin/cancelled-returned-orders?filter=${filter}`;
        if (filter === "custom" && startDate && endDate) {
          url += `&startDate=${startDate}&endDate=${endDate}`;
        }

        try {
          const response = await fetch(url);
          const data = await response.json();

          if (data.success) {
            updateCancelReturnTable(data.reportData);
          }
        } catch (error) {
          console.error("Error fetching cancelled/returned report:", error);
        }
      }

      // Update cancelled/returned orders table
      function updateCancelReturnTable(reportData) {
        const tbody = document.getElementById("cancelReturnTableBody");
        tbody.innerHTML = ""; // Clear old data

        if (reportData.length === 0) {
          tbody.innerHTML =
            "<tr><td colspan='8'>No cancelled or returned orders found</td></tr>";
          return;
        }
        
        reportData.forEach((order) => {
          const row = document.createElement("tr");
          row.innerHTML = `
            <td>${order.date}</td>
            <td>${order.orderId || "N/A"}</td>
            <td>${order.productName || "Unknown"}</td>
            <td>${order.customerName || "Unknown"}</td>
            <td>${order.price.toFixed(2)}</td>
            <td>${order.quantity}</td>
           <td>${order.status}</td>
           
        `;
          tbody.appendChild(row);
        });
      }

      // Download PDF for cancelled/returned orders
      function downloadCancelReturnPDF() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF();

        doc.setFont("helvetica", "bold");
        doc.setFontSize(18);
        doc.text(
          "Cancelled and Returned Orders Report",
          doc.internal.pageSize.getWidth() / 2,
          15,
          { align: "center" }
        );

        doc.setFontSize(12);
        doc.setFont("helvetica", "normal");
        const today = new Date();
        doc.text(
          "Generated: " + today.toLocaleDateString(),
          doc.internal.pageSize.getWidth() / 2,
          22,
          { align: "center" }
        );

        const rows = [];
        document
          .querySelectorAll("#cancelReturnTableBody tr")
          .forEach((row) => {
            const rowData = [];
            row
              .querySelectorAll("td")
              .forEach((cell) => rowData.push(cell.innerText));
            rows.push(rowData);
          });

        doc.autoTable({
          head: [
            [
              "Order ID",
              "Product Name",
              "Customer Name",
              "Price",
              "Discount",
              "Total Amount",
              "Date",
              "Status",
            ],
          ],
          body: rows,
          startY: 30,
          styles: { fontSize: 10, font: "helvetica", cellPadding: 5 },
          headStyles: {
            fillColor: [40, 167, 69],
            textColor: [255, 255, 255],
            fontStyle: "bold",
            halign: "left",
          },
          alternateRowStyles: { fillColor: [245, 245, 245] },
          columnStyles: {
            0: { cellWidth: 25 },
            1: { cellWidth: 30 },
            2: { cellWidth: 30 }, 
            3: { cellWidth: 20 }, 
            4: { cellWidth: 20 }, 
            5: { cellWidth: 25 }, 
            6: { cellWidth: 25 }, 
            7: { cellWidth: 25 }, 
          },
        });

        doc.save("Cancelled_Returned_Orders_Report.pdf");
      }

      // Download Excel for cancelled/returned orders
      function downloadCancelReturnExcel() {
        const table = document.querySelector("#cancelReturnTableBody");
        const ws = XLSX.utils.table_to_sheet(table);
        const wb = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(wb, ws, "Cancelled Returned Orders");
        XLSX.writeFile(wb, "Cancelled_Returned_Orders.xlsx");
      }

      // Event listener for filter change
      document
        .getElementById("cancelReturnFilter")
        .addEventListener("change", fetchCancelReturnReport);

      // Initial load
      document.addEventListener("DOMContentLoaded", fetchCancelReturnReport);
    </script>
  </body>
</html>
