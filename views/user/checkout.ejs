<%- include("../../views/partials/user/header") %> 
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<style>
    
/* modal style */
.coupon-container {
  max-height: 400px;
  overflow-y: auto;
}

.coupon-card {
  border: 2px dashed #ddd;
  padding: 15px;
  margin-bottom: 15px;
  border-radius: 8px;
  position: relative;
  background: #f8f9fa;
}

.coupon-code {
  font-weight: bold;
  color: #dc3545;
  font-size: 1.2em;
}

.coupon-details {
  margin: 10px 0;
}

.minimum-spend {
  font-size: 0.9em;
  color: #6c757d;
}

.apply-coupon-btn {
  position: absolute;
  right: 15px;
  top: 50%;
  transform: translateY(-50%);
}


/* Enhanced Responsive Checkout Styles */

/* Base responsive container adjustments */
.container-fluid.py-5 {
  padding-left: 15px;
  padding-right: 15px;
}

/* Responsive table with improved spacing */
.table-responsive {
  margin-bottom: 1.5rem;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
  border-radius: 8px;
  overflow: hidden;
}

.table {
  margin-bottom: 0;
}

/* Product image adjustments */
.table tbody tr th .d-flex img {
  width: 70px;
  height: 70px;
  object-fit: cover;
}

/* Reduce spacing for summary rows */
.table tbody tr:nth-last-child(-n+4) .py-5 {
  padding-top: 0.5rem !important;
  padding-bottom: 0.5rem !important;
}

/* Improve spacing in table cells */
.table th, .table td {
  padding: 0.75rem;
  vertical-align: middle;
}

/* Summary rows styling */
.table tbody tr:nth-last-child(-n+4) .py-3 {
  padding-top: 0.25rem !important;
  padding-bottom: 0.25rem !important;
}

/* Payment methods section enhancements */
.payment-methods-container {
  margin-top: 1.5rem;
  margin-bottom: 1.5rem;
  background: #f8f9fa;
  border-radius: 8px;
  padding: 1.25rem;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.05);
}

.payment-method-title {
  font-weight: 600;
  margin-bottom: 1rem;
  color: #333;
  border-bottom: 1px solid #dee2e6;
  padding-bottom: 0.5rem;
}

/* Payment method options */
.payment-option {
  padding: 10px 15px;
  border-radius: 8px;
  transition: all 0.3s ease;
  margin-bottom: 0.25rem;
}

.payment-option:hover {
  background-color: #f1f1f1;
}

/* Address selection improvements */
#additional-addresses {
  margin-bottom: 1.5rem;
  padding: 1rem;
  background: #f8f9fa;
  border-radius: 8px;
}

#additional-addresses h3 {
  font-size: 1.25rem;
  margin-bottom: 0.75rem;
  color: #333;
}

#additional-addresses div {
  margin-bottom: 0.5rem;
}

/* Form styling */
.form-item {
  margin-bottom: 1.25rem;
}

/* Coupon area improvements */
.coupon-area {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  gap: 10px;
  margin-top: 1rem;
  margin-bottom: 1rem;
  padding: 0.75rem;
  background: #f8f9fa;
  border-radius: 8px;
}

#couponapplied {
  margin: 0;
  padding: 8px 12px !important;
  background-color: #e9ecef;
  border-radius: 6px;
  font-weight: 500;
  min-width: 120px;
  display: inline-block;
  text-align: center;
}

/* Place order button */
#placeorder {
  background-color: #28a745;
  color: white !important;
  border: none;
  font-weight: 600;
  transition: all 0.3s ease;
  margin-top: 1rem;
  padding: 12px 20px;
}

/* Responsive adjustments */
@media (max-width: 991px) {
  .col-lg-6:first-child {
    margin-bottom: 1.5rem;
  }
  
  .payment-methods-container {
    margin-top: 1rem;
  }
}
@media (max-width: 767px) {
  h1.mb-4 {
    font-size: 1.75rem;
    text-align: center;
    margin-bottom: 1rem !important;
  }
  
  .coupon-area {
    justify-content: center;
  }
  
  /* Mobile table fixes */
  .table thead {
    display: none; /* Hide table headers on mobile */
  }
  
  .table, .table tbody, .table tr, .table td, .table th {
    display: block;
    width: 100%;
  }
  
  .table tr {
    margin-bottom: 1.5rem;
    border-bottom: 2px solid #dee2e6;
    padding: 10px 0;
  }
  
  .table th { /* Product image column */
    text-align: center;
    padding: 0.5rem 0;
  }
  
  .table td { /* Other columns */
    text-align: right;
    padding: 0.5rem 0.75rem;
    position: relative;
    padding-left: 50%;
    border: none; /* Remove default borders */
  }
  
  .table td:before {
    content: attr(data-label);
    position: absolute;
    left: 0.75rem;
    width: 45%;
    padding-right: 10px;
    font-weight: 600;
    text-align: left;
    color: #333;
  }
  
  /* Ensure product image aligns properly */
  .table tbody tr th .d-flex {
    justify-content: center;
    margin-bottom: 0.5rem;
  }
  
  /* Summary rows in mobile view */
  .table tbody tr:nth-last-child(-n+4) td {
    padding: 0.5rem 0.75rem;
  }
  
  /* Fix for product name not centering awkwardly */
  .table td:nth-child(2) {
    text-align: left;
    padding-left: 0.75rem;
  }
}
  /* Summary rows in mobile view */
  .table tbody tr:nth-last-child(-n+4) td {
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
  }
  
  /* Product image in mobile view */
  .table tbody tr th .d-flex {
    justify-content: center;
  }


@media (max-width: 576px) {
  .container-fluid.page-header {
    padding: 1.5rem 0;
  }
  
  h1.display-6 {
    font-size: 1.5rem;
  }
  
  .breadcrumb {
    font-size: 0.85rem;
  }
  
  .table tbody tr th .d-flex img {
    width: 60px;
    height: 60px;
  }
  
  /* Compact coupon buttons */
  .coupon-area {
    padding: 0.5rem;
  }
  
  .coupon-area button {
    padding: 0.5rem 0.75rem !important;
    font-size: 0.9rem;
  }
  
  #couponapplied {
    padding: 6px 10px !important;
    font-size: 0.9rem;
  }
}

/* Improved spacing between billing details and order summary on smaller screens */
@media (max-width: 991px) {
  .row.g-5 {
    row-gap: 1rem !important;
  }
}

/* Fix for the extra space in payment methods section */
.payment-option .form-check {
  margin-bottom: 0 !important;
}

/* Fix for the spacing between payment methods and place order button */
.row.g-4.text-center.align-items-center.justify-content-center.pt-4 {
  padding-top: 1rem !important;
}   
 </style>
 <style>
          /* Responsive coupon modal styles */
          .modal-dialog {
            max-width: 500px;
            margin: 1.75rem auto;
          }
          
          /* Make modal smaller on extra small screens */
          @media (max-width: 576px) {
            .modal-dialog {
              max-width: 95%;
              margin: 1rem auto;
            }
          }
          
          /* Coupon container styling */
          .coupon-container {
            max-height: 400px;
            overflow-y: auto;
          }
          
          /* Individual coupon styling - add this if you have coupon items */
          .coupon-item {
            padding: 1rem;
            border: 1px dashed #dee2e6;
            border-radius: 8px;
            margin-bottom: 1rem;
            background-color: #f8f9fa;
            transition: all 0.2s ease;
          }
          
          .coupon-item:hover {
            border-color: #6c757d;
            background-color: #f1f3f5;
          }
          
          .coupon-code {
            font-weight: bold;
            letter-spacing: 1px;
            color: #495057;
            padding: 0.25rem 0.5rem;
            background-color: #e9ecef;
            border-radius: 4px;
            display: inline-block;
          }
          
          .coupon-description {
            margin-top: 0.5rem;
            color: #6c757d;
          }
          
          /* Button styling if you have select buttons */
          .coupon-select-btn {
            padding: 0.25rem 0.75rem;
            font-size: 0.875rem;
          }
          
          @media (max-width: 400px) {
            .coupon-item {
              padding: 0.75rem;
            }
            
            .coupon-description {
              font-size: 0.875rem;
            }
          }
        </style>
       


        <!-- Single Page Header start -->
        <div class="container-fluid page-header py-5">
            <h1 class="text-center text-white display-6">Checkout</h1>
            <ol class="breadcrumb justify-content-center mb-0">
                <li class="breadcrumb-item"><a href="/home">home</a></li>
                <li class="breadcrumb-item"><a href="/shop">shop</a></li>
                <li class="breadcrumb-item active text-white">Checkout</li>
            </ol>
        </div>
        <!-- Single Page Header End -->


        <!-- Checkout Page Start -->
        <div class="container-fluid py-5">
            <div class="container py-5">
                <h1 class="mb-4">Billing details</h1>
                <form action="#" id="checkout-form">
                    <div class="row g-5">
                        
                        <div class="col-md-12 col-lg-6 col-xl-7">
                            <div class="form-item">
                                <div id="additional-addresses">
                                    <h3>Select a  Address</h3>
                                    <% address.forEach(function (addr, index) { %>
                                        <div>
                                            <input
                                                type="radio"
                                                name="address"
                                                id="address-<%= index %>"
                                                value="<%= addr._id %>"
                                                <%= index === 0 ? "checked" : "" %>
                                            >
                                            <label for="address-<%= index %>">
                                                <%= addr.name %>, <%= addr.landmark %>, <%= addr.district %>, <%= addr.pincode %>,<%= addr.state%>,<%=addr.phone%>
                                            </label>
                                        </div>
                                    <% }); %>
                                </div>
                            </div>
                        

                        
                            <div class="row">
                                <div class="col-md-12 col-lg-6"><br>
                                    <div class="form-item w-100">
                                        <input type="hidden" class="form-control" id="addressId" value="<%= address._id %>">
                                        <div id="addresserror" class="text-danger text-center"></div>
                                        <label class="form-label my-6">Name<sup>*</sup></label>
                                        <input type="text" class="form-control" id="name" value="<%= address.name %>" >
                                    </div>
                                </div>
                               
                            </div>
                           
                            <div class="form-item">
                                <label class="form-label my-3">Landmark <sup>*</sup></label>
                                <input type="text" class="form-control" placeholder="House Number Street Name" required id="landmark" >
                            </div>
                            <div class="form-item">
                                <label class="form-label my-3">Town/City<sup>*</sup></label>
                                <input type="text" class="form-control" id="city"  required >
                            </div>
                            <div class="form-item">
                                <label class="form-label my-3">State<sup>*</sup></label>
                                <input type="text" class="form-control" id="state" required >
                            </div>
                            <div class="form-item">
                                <label class="form-label my-3">Postcode<sup>*</sup></label>
                                <input type="text" class="form-control" id="postcode" required >
                            </div>
                            <div class="form-item">
                                <label class="form-label my-3">Mobile<sup>*</sup></label>
                                <input type="tel" class="form-control" id="mobile" required >
                            </div>
                           
                            <hr>
                            <div class="form-check my-3">
                                <input class="form-check-input" type="checkbox" id="ship-different-address" name="Address" >
                                <label class="form-check-label" for="Address-1">Ship to a different address?</label>
                            </div>
                            
                        </div>
                        <div class="col-md-12 col-lg-6 col-xl-5">
                          
                            <div class="table-responsive">
                              <%if(carts){%>
                              <input type="text"  id="cartId" hidden value="<%=carts._id %>">

                              <%}%>
                              <table class="table text-center">
                                <thead>
                                  <tr>
                                    <h3 class="my-4 text-center">Order Details</h3>
                                  </tr>
                                  <tr>
                                    <th scope="col">Products</th>
                                    <th scope="col">Name</th>
                                    <th scope="col">Price</th>
                                    <th scope="col">Quantity</th>
                                    <th scope="col">Total</th>
                                  </tr>
                                </thead>
                                <tbody>
                                  <% carts.items.forEach(item => { %>
                                  <tr>
                                    <th scope="row">
                                      <div class="d-flex align-items-center mt-2">
                                        <img src="<%= item.productId.productImage[0] %>" class="img-fluid rounded-circle" style="width: 90px; height: 90px;" alt="">
                                      </div>
                                    </th>
                                    <td class="py-5" data-label="Name"><%= item.productId.productName %></td>
                                    <td class="py-5" data-label="Price">₹<%= item.price.toFixed(2) %></td>
                                    <td class="py-5" data-label="Quantity"><%= item.quantity %></td>
                                    <td class="py-5" data-label="Total">₹<%= item.totalPrice.toFixed(2) %></td>
                                    <td><input type="hidden" id="productid" value="<%= item.productId._id %>"></td>
                                  </tr>
                                  <% }); %>
                                  
                                  <tr>
                                    <th scope="row"></th>
                                    <td class="py-5" data-label="Description"><p class="mb-0 text-dark py-3"><strong>Subtotal</strong></p></td>
                                    <td class="py-5"></td>
                                    <td class="py-5"></td>
                                    <td class="py-5" data-label="Subtotal"><div class="py-3 border-bottom border-top"><p class="mb-0 text-dark" id="totalprice">₹<%= total %></p></div></td>
                                  </tr>
                                  
                                  <tr>
                                    <th scope="row"></th>
                                    <td class="py-5" data-label="Description"><p class="mb-0 text-dark py-3">Shipping charge</p></td>
                                    <td class="py-5"></td>
                                    <td class="py-5"></td>
                                    <td class="py-5" data-label="Shipping"><div class="py-3 border-bottom border-top"><p class="mb-0 text-dark">
                                      <% if(total >= 1000|| total==0) { %>₹0<% } else { %>₹50<% } %>
                                    </p></div></td>
                                  </tr>
                                  
                                  <tr>
                                    <th scope="row"></th>
                                    <td class="py-5" data-label="Description"><p class="mb-0 text-dark py-3">Coupon Discount</p></td>
                                    <td class="py-5"></td>
                                    <td class="py-5"></td>
                                    <td class="py-5" data-label="Discount"><div class="py-3 border-bottom border-top"><p class="mb-0 text-dark" id="discountprice">₹0</p></div></td>
                                  </tr>
                                  
                                  <tr>
                                    <th scope="row"></th>
                                    <td class="py-5" data-label="Description"><p class="mb-0 text-dark text-uppercase py-3"><strong>TOTAL</strong></p></td>
                                    <td class="py-5"></td>
                                    <td class="py-5"></td>
                                    <td class="py-5" data-label="Total"><div class="py-3 border-bottom border-top"><p class="mb-0 text-dark" id="totalorderamount">
                                      <% if(total >= 1000 || total == 0) { %>₹<%= total + 0 %><% } else { %>₹<%= total + 50 %><% } %>
                                    </p></div></td>
                                  </tr>
                                </tbody>
                              </table>
                            </div>
                            <!-- Payment Methods -->
                            <h5 class="my-4">Payment Method</h5>
                      
                            <!-- Razorpay -->
<div class="row g-4 text-center align-items-center justify-content-center border-bottom py-3">
  <div class="col-12">
      <div class="form-check text-start my-3">
          <input type="radio" class="form-check-input bg-primary border-0" name="paymentMethod" id="razorpay" value="RAZORPAY">
          <label class="form-check-label" for="razorpay">via Razorpay</label>
      </div>
  </div>
</div>

<!-- Wallet -->
<div class="row g-4 text-center align-items-center justify-content-center border-bottom py-3">
  <div class="col-12">
      <div class="form-check text-start my-3">
          <input type="radio" class="form-check-input bg-primary border-0" name="paymentMethod" id="wallet" value="WALLET">
          <label class="form-check-label" for="wallet">Wallet</label>
      </div> 
  </div>
</div>

<!-- COD -->
<div class="row g-4 text-center align-items-center justify-content-center border-bottom py-3">
  <div class="col-12">
      <div class="form-check text-start my-3">
          <input type="radio" class="form-check-input bg-primary border-0" name="paymentMethod" id="cod" value="COD">
          <label class="form-check-label" for="cod">Cash on Delivery</label>
      </div>
  </div>
</div>

                            <div class="mt-5 d-flex align-items-center">
                                <button class="btn border-secondary rounded-pill px-4 py-3 text-primary" 
                                        type="button" id="viewCouponsButton"
                                        onclick="fetchAndDisplayCoupons()">
                                  Apply Coupon
                                </button>
                                <button class="btn border-secondary rounded-pill px-4 py-3 text-primary" 
                                type="button" id="deleteCouponsButton"
                                onclick="removeCoupon(`<%=total%>`)">
                          Remove Coupon
                        </button>
                       
                        <p id="couponapplied" class="rounded border border-light p-5 " placeholder="coupon code"></p>

                              </div>
                              <div id="errorCoupon" class="text-danger"></div>
                            <div class="row g-4 text-center align-items-center justify-content-center pt-4">
                                <button type="button" id="placeorder" name="placeorder"class="btn border-secondary py-3 px-4 text-uppercase w-100 text-primary" >Place Order</button>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
        <!-- Checkout Page End -->
         

        <div class="modal fade" id="couponModal" tabindex="-1" aria-labelledby="couponModalLabel" aria-hidden="true">
          <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="couponModalLabel">Available Coupons</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <div class="coupon-container" id="couponsList">
                  <!-- Coupons will be dynamically inserted here -->
                </div>
              </div>
            </div>
          </div>
        </div>
        
        
        <%- include("../../views/partials/user/footer") %>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
        <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.4/jquery.min.js"></script>
       <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
       <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
        <script>
        document.addEventListener("DOMContentLoaded", function () {
        //coupons
              const couponButton = document.getElementById('viewCouponsButton');
        const deletecouponButton = document.getElementById('deleteCouponsButton');
        if (couponButton) {
    couponButton.addEventListener('click', fetchAndDisplayCoupons);
  } 
  document.querySelector("#couponModal .btn-close").addEventListener("click", function () {
    couponModal.hide(); // Manually close modal
    });
    document.querySelector('.modal-backdrop')?.remove();
    document.body.classList.remove('modal-open');
  //order
            const shipDifferentCheckbox = document.getElementById("ship-different-address");
            const addressRadios = document.querySelectorAll("input[name='address']");
            const addressFields = {
                addressId: document.getElementById("addressId"),
                name: document.getElementById("name"),
                landmark: document.getElementById("landmark"),
                district: document.getElementById("city"),
                postcode: document.getElementById("postcode"),
                mobile: document.getElementById("mobile"),
                state: document.getElementById("state"),
            };

            // Load default address
            function loadDefaultAddress() {
                const defaultAddress = JSON.parse('<%- JSON.stringify(address[0]) %>');
                updateAddressFields(defaultAddress);
            }

            // Update address fields with given address data
            function updateAddressFields(address) {
                addressFields.addressId.value = address._id || "";
                addressFields.name.value = address.name || "";
                addressFields.landmark.value = address.landmark || "";
                addressFields.district.value = address.district || "";
                addressFields.postcode.value = address.pincode || "";
                addressFields.mobile.value = address.phone || "";
                addressFields.state.value = address.state || "";
            }

            // Clear address fields
            function clearAddressFields() {
                Object.values(addressFields).forEach(field => field.value = "");
            }

            // Handle address radio button change
            document.querySelector("body").addEventListener("change", function (event) {
                if (event.target.name === 'address') {
                    const selectedAddress = JSON.parse('<%- JSON.stringify(address) %>').find(addr => addr._id === event.target.value);
                    if (selectedAddress) updateAddressFields(selectedAddress);
                }
            });

            // Handle ship to different address checkbox
            shipDifferentCheckbox.addEventListener("change", function () {
                this.checked ? clearAddressFields() : loadDefaultAddress();
            });

            // Extract product details from the table
            function getProductDetails() {
                const productRows = document.querySelectorAll("table tbody tr");
                const products = [];
                productRows.forEach(row => {
                    const _id=document.getElementById('productid').value;
                    const productImage=row.querySelector("td:nth-child(1)")?.textContent.trim();
                    const productName = row.querySelector("td:nth-child(2)")?.textContent.trim();
                   
                    const price = row.querySelector("td:nth-child(3)")?.textContent.replace("₹", "").trim();
                    const quantity = row.querySelector("td:nth-child(4)")?.textContent.trim();
                    const totalPrice = row.querySelector("td:nth-child(5)")?.textContent.replace("₹", "").trim();
                 
                    if (productName && price && quantity && totalPrice) {
                        products.push({
                            _id,
                            productName,
                            productImage,
                            price: parseFloat(price),
                            quantity: parseInt(quantity, 10),
                            totalPrice: parseFloat(totalPrice),
                            status:"Ordered",
                        });
                    }
                    
                });
                return products;
            }

            // Handle place order button
                 document.getElementById("placeorder").addEventListener("click", function () {
                 const paymentCheckboxes = document.querySelectorAll('input[name="paymentMethod"]:checked');
                 const paymentMethod = Array.from(paymentCheckboxes).map(checkbox => checkbox.value)[0];
                 let couponCode = $('#couponapplied').text().trim()||"0";
      
const tp=$(`#totalorderamount`).text()
const totalPrice=parseFloat(tp.replace("₹", ""))


const cd=$(`#discountprice`).text()
const couponDiscount=parseFloat(cd.replace("₹", ""))||0


const totalamount=parseFloat($(`#totalprice`).text().replace("₹", ""))
const cartt=$(`#cartId`).text()


                
               
                if (!paymentMethod) {
                    Swal.fire({
                        title: "Payment Method Required",
                        text: "Please select a payment method to proceed.",
                        icon: "warning",
                    });
                    return false;
                }
            if(document.querySelector("input[name='address']:checked")){
                const selectedAddressId = document.querySelector("input[name='address']:checked").value||null
            }
                const address = {
                    
                    name: addressFields.name.value.trim(),
                    landmark: addressFields.landmark.value.trim(),
                    district: addressFields.district.value.trim(),
                    state: addressFields.state.value.trim(),
                    pincode: addressFields.postcode.value.trim(),
                    phone: addressFields.mobile.value.trim(),
                };
                const validIndianPattern = /^[6-9]\d{9}$/;
  const invalidPattern = /^(.)\1{9}$/;
if(!address)
{document.getElementById('addresserror').textContent='Please give address'
 
  return
}
  if (!address.name || !address.landmark || !address.district || !address.state || !address.pincode || !address.phone) {
    document.getElementById('addresserror').textContent='Please fill all fields!'
    
    return;
  }
  if (invalidPattern.test(address.phone)) {
    document.getElementById('addresserror').textContent='Phone number cannot be all the same digit'
    
    return;
  }
  if (!validIndianPattern.test(address.phone)) {
    document.getElementById('addresserror').textContent='Enter a valid Indian phone number'
  
    return;
  }
 
  
  
  
  const cartId=document.getElementById("cartId").value
 

                const orderData = {
                   
                   cartId:cartId,
                    address:address,
                    paymentMethod: paymentMethod,
                    subtotal:totalamount,
                    couponCode: couponCode||"",
                    couponDiscount: couponDiscount,
                    finalAmount:totalPrice,
                    orderedItems: getProductDetails(), // Include product details
                };
                
                
  //payment implemetation starts
 
  if(paymentMethod=="COD" && orderData.finalAmount>1000)
  {
    Swal.fire({
                icon: 'error',
                text: 'Payment above 1000 is not allowed for Cash On Delivery.So Please select other Payment Method',
                showConfirmButton: false,
                timer: 1500
            });
            return;
  }
   switch(paymentMethod) {
        case "COD":
            placeOrder(orderData);
            break;
        case "RAZORPAY":
            createOrder(orderData);
            break;
        case "WALLET":
            processWalletPayment(orderData);
            break;
        default:
            Swal.fire({
                icon: 'error',
                text: 'Invalid payment method',
                showConfirmButton: false,
                timer: 1500
            });
    }

//payment implemetation ends

    });

            // Initialize with the default address
            loadDefaultAddress();
           })


           document.addEventListener("DOMContentLoaded", function() {
  // Add data-label attributes to table cells for mobile view
  const tableHeaders = document.querySelectorAll('.table thead th');
  if (tableHeaders.length > 0) {
    const headerTexts = Array.from(tableHeaders).map(th => th.textContent.trim());
    
    const tableRows = document.querySelectorAll('.table tbody tr');
    tableRows.forEach(row => {
      const cells = row.querySelectorAll('td');
      cells.forEach((cell, index) => {
        if (index < headerTexts.length) {
          cell.setAttribute('data-label', headerTexts[index]);
        }
      });
    });
  }

  // Create a container for payment methods to improve styling
  const paymentMethodsSection = document.querySelector('h5.my-4');
  if (paymentMethodsSection) {
    const paymentContainer = document.createElement('div');
    paymentContainer.className = 'payment-methods-container';
    
    // Get the payment section title
    const title = paymentMethodsSection;
    title.className = 'payment-method-title';
    
    // Get all payment options
    const paymentRows = document.querySelectorAll('.row.g-4.text-center.align-items-center.justify-content-center.border-bottom.py-3');
    
    // Restructure the DOM
    const parentElement = title.parentNode;
    parentElement.insertBefore(paymentContainer, title);
    paymentContainer.appendChild(title);
    
    paymentRows.forEach(row => {
      row.classList.add('payment-option');
      paymentContainer.appendChild(row);
    });
  }

  // Enhance coupon area
  const couponButtonsArea = document.querySelector('.mt-5.d-flex.align-items-center');
  if (couponButtonsArea) {
    couponButtonsArea.className = 'coupon-area';
  }
  
  // Optimize summary rows spacing
  const summaryRows = document.querySelectorAll('.table tbody tr:nth-last-child(-n+4)');
  summaryRows.forEach(row => {
    const cells = row.querySelectorAll('.py-5');
    cells.forEach(cell => {
      cell.classList.remove('py-5');
      cell.classList.add('py-2');
    });
    
    const innerDivs = row.querySelectorAll('.py-3');
    innerDivs.forEach(div => {
      div.classList.remove('py-3');
      div.classList.add('py-2');
    });
  });
  
  // Make the page responsive to orientation changes
  window.addEventListener('resize', function() {
    adjustLayoutForScreenSize();
  });
  
  // Initial adjustment
  adjustLayoutForScreenSize();
});

// Function to adjust layout based on screen size
function adjustLayoutForScreenSize() {
  const isMobile = window.innerWidth <= 767;
  
  // Adjust table layout
  if (isMobile) {
    document.querySelectorAll('.table tbody tr th').forEach(header => {
      header.style.borderBottom = 'none';
    });
  } else {
    document.querySelectorAll('.table tbody tr th').forEach(header => {
      header.style.borderBottom = '';
    });
  }
}

  
  const couponButtonsArea = document.querySelector('.mt-5.d-flex.align-items-center');
  if (couponButtonsArea) {
    couponButtonsArea.className = 'coupon-area';
  }





function removeCoupon(total){

let couponCode=$('#couponapplied').text().trim();

const cartTotal = parseFloat($(`#totalprice`).text().replace('₹', '').trim()) ;
if (!couponCode){
 document.getElementById('errorCoupon').innerText="No coupons available"

return false
}
fetch(`/removeCoupon?couponCode=${couponCode}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      couponCode: couponCode,
      
    })
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      // Update the subtotal
      
    
      Swal.fire({
        title: 'Success',
        text: 'Coupon removed successfully!',
        icon: 'success'
      });

      $(`#discountprice`).text( `₹ 0`)
      let delivery=0;
      if(parseFloat(total)<1000)
      delivery=50;
      const finalTotal = delivery + parseFloat(total)
      $('#totalorderamount').text(`₹${finalTotal}`);
      $('#couponapplied').text("")



    } else {
      Swal.fire({
        title: 'Error',
        text: data.message || 'Failed to apply coupon',
        icon: 'error'
      });
  }})  
  .catch(error => {
    
    Swal.fire({
      title: 'Error',
      text: 'Failed to remove coupons. Please try again.',
      icon: 'error'
    });
  })   
    

}

 function fetchAndDisplayCoupons() {
  let couponCode=$('#couponapplied').text().trim();
  if(couponCode)
 {
  document.getElementById('errorCoupon').innerText="Coupon already exists"
  return;
 }
 const cartTotal = parseFloat($(`#totalprice`).text().replace('₹', '').trim()) ;
 
  // Fetch coupons from the server
  fetch(`/getCouponCodes?cartTotal=${cartTotal}`, {
    method: 'GET',
    headers: {
      'Content-Type': 'application/json'
    },
    })
  .then(response => response.json())
  .then(coupons => {
   
    const couponsContainer = document.getElementById('couponsList');
    if (!couponsContainer) {
        
        return;
      }
    couponsContainer.innerHTML = '';

    if (coupons.length === 0) {
      couponsContainer.innerHTML = '<div class="alert alert-info">No coupons available for your purchase amount.</div>';
      return;
    }

    coupons.forEach(coupon => {
      const couponElement = createCouponElement(coupon);
      couponsContainer.appendChild(couponElement);
    });

    // Show the modal
   
    const modalElement = document.getElementById('couponModal');
      const modalInstance = bootstrap.Modal.getInstance(modalElement) || new bootstrap.Modal(modalElement);
      modalInstance.show();
  })
  .catch(error => {
    
    Swal.fire({
      title: 'Error',
      text: 'Failed to load available coupons. Please try again.',
      icon: 'error'
    });
  });
}


function createCouponElement(coupon) {
  const div = document.createElement('div');
  div.className = 'coupon-card';
  div.innerHTML = `
    <div class="coupon-code">${coupon.couponCode}</div>
    <div class="coupon-details">
      <p class="mb-1">${coupon.description}</p>
      <p class="minimum-spend mb-1">Minimum spend: ₹${coupon.minPrice}</p>
      <p class="mb-1">Discount: ₹${coupon.discount}</p>
    </div>
    <button class="btn btn-primary apply-coupon-btn">
      Apply
    </button>
  `;

  // Add click event listener to the apply button
  const applyButton = div.querySelector('.apply-coupon-btn');
  applyButton.addEventListener('click', function(e) {
    e.preventDefault();
    applyCoupon(coupon.couponCode);
  });

  return div;
}
      
function applyCoupon(couponCode) {
 
  const cartTotal = parseFloat($(`#totalprice`).text().replace('₹', '').trim()) ;
 
  

  if (isNaN(cartTotal)) {
    
    
    Swal.fire({
      title: 'Error',
      text: 'Could not determine cart total. Please try again.',
      icon: 'error'
    });
    return;
  }

  fetch('/applyCoupon', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      couponCode: couponCode,
      cartTotal: cartTotal
    })
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Network response was not ok');
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      // Update the subtotal
    
     
     const totalamount = parseFloat($('#totalorderamount').text().replace('₹', '').trim());

      
      $(`#couponapplied`).text(`${couponCode}`);


      $(`#discountprice`).text( `₹${data.discount.toFixed(2)}`)
      let delivery=0;
      if(parseFloat(data.finalAmount)<1000 && parseFloat(data.finalAmount)!== 0 )
      delivery=50;
      const finalTotal = (delivery + parseFloat(data.finalAmount))- parseFloat(data.discount)

    
    
      $('#totalorderamount').text(`₹${data.finalAmount.toFixed(2)}`);



      // Close the modal properly
      const modalElement = document.getElementById('couponModal');
      if (modalElement) {
        const modalInstance = bootstrap.Modal.getInstance(modalElement);
        if (modalInstance) {
          modalInstance.hide();
         
          modalElement.addEventListener('hidden.bs.modal', function () {
          
            const backdrop = document.querySelector('.modal-backdrop');
            if (backdrop) {
              backdrop.remove();
            }
            document.body.classList.remove('modal-open');
          }, { once: true }); 
        }
      }

      Swal.fire({
        title: 'Success',
        text: 'Coupon applied successfully!',
        icon: 'success'
      });
    } else {
      Swal.fire({
        title: 'Error',
        text: data.message || 'Failed to apply coupon',
        icon: 'error'
      });
    }
  })
  .catch(error => {
    
    Swal.fire({
      title: 'Error',
      text: 'Failed to apply coupon. Please try again.',
      icon: 'error'
    });
  });
}

const placeOrder = async (orderData) => {
    try {
       
        const response = await fetch("/placeOrder", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ orderData })
        });

       

        const result = await response.json();

       
      
        if (result.success) {
            await Swal.fire({
                icon: 'success',
                text: `Your order ID is: ${result.order?.orderId}`,
                showConfirmButton: false,
                timer: 1500
            });
           
           window.location.href=`/success?id=${result.order?.orderId}`
        } else {
            throw new Error(result.message || 'Order placement failed');
        }
    } catch (error) {
        
        await Swal.fire({
            icon: 'error',
            text: error.message || 'An error occurred while placing the order.',
            showConfirmButton: false,
            timer: 1500
        });
    }
};

const createOrder = async (orderData) => {
    try {
       
        const response = await fetch("/placeOrder", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            credentials: 'include', 
            body: JSON.stringify({ orderData })
        });
      
        const order = await response.json();
     
      
        if (!order.success) {
            throw new Error(result.error || "Failed to create order");
        }
        const orderId = order.orderId; 
       
        const options = {
            key: "rzp_test_lcQt1KNawGzBhX",
            amount: order.order.amount * 100,
            currency: "INR",
            name: "Fruitables",
            description: "Order Payment",
            order_id:order.order.id,
            handler: async function(response) {
            
                await verifyPayment(response,  orderData.cartId,orderId);
            },
            prefill: {
                name: orderData.address.name,
                contact: orderData.address.phone
            },
           
        };

        const rzp = new Razorpay(options);
       
        rzp.on('payment.failed', function (response) {
        Swal.fire({
            icon: 'error',
            title: 'Payment Failed!',
            html: `Reason: ${response.error.reason}<br>You can continue the order in your orders section and retry the payment.`,
            confirmButtonText: 'Okey',
            confirmButtonColor: '#d33'
        }).then(() => {
        
            window.location.href=`/failedPayment/${orderId}`
           
        });
        
        
    });
        rzp.open();//open
    } catch (error) {
        
        await Swal.fire({
            icon: 'error',
            text: error.message || 'Failed to initialize payment',
            showConfirmButton: false,
            timer: 1500
        });
    }
};


const verifyPayment = async (paymentData, cartId) => {
    try {
      
        const response = await fetch("/razorpayverifyPayment", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
           
            body: JSON.stringify({ paymentData, cartId })
        });

        const result = await response.json();
       

        if (result.success) {
            await Swal.fire({
                icon: "success",
                text: "Payment successful! Redirecting...",
                showConfirmButton: false,
                timer: 1500
        
        
              });
           
            setTimeout(() => {
                window.location.href = `/success?id=${result.orderId}`;
            }, 1500);
        } 
    } catch (error) {
        
        await Swal.fire({
            icon: "error",
            text: error.message || 'Payment verification failed',
            showConfirmButton: false,
            timer: 1500
        });
        
        setTimeout(() => {
            window.location.href = `/failedPayment/${result.orderId}`;
        }, 1500);
    }
};


const processWalletPayment = async (orderData) => {
    try {
        
        const response = await fetch("/placeOrder", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ orderData })
        });

        if (!response.ok) {
          const errorResponse = await response.json();
            
            throw new Error(errorResponse.message || `HTTP error! status: ${response.status}`);
        }

        const result = await response.json();
               if (result.success) {
    await Swal.fire({
        icon: "success",
        text: `Wallet Payment Successful! Your order ID is:${result?.orderId}`,
        showConfirmButton: false,
        timer: 1500
    });
    window.location.href = `/success?id=${result.order?.orderId}`;
} else {
    throw new Error(result.message || 'Wallet payment failed');
}

    } catch (error) {
        
        await Swal.fire({
            icon: "error",
            text: error.message || 'Wallet payment processing failed',
            showConfirmButton: false,
            timer: 1500
        });
    }
};

</script>
</html>
