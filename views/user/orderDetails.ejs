<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Order Details</title>
  <link rel="stylesheet" href="css/style.css">
  <style>
    /* General Reset */
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Montserrat', sans-serif;
    }

    body {
      background-color: #f8f9fa;
      color: #333;
      line-height: 1.6;
    }

    /* Container */
    .container {
      width: 90%;
      max-width: 1200px;
      margin: 20px auto;
    }

    h1 {
      font-size: 2rem;
      color: #333;
      text-align: center;
      margin-bottom: 20px;
    }

    /* Card Styles */
    .card {
      background: #fff;
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 20px;
      margin-bottom: 20px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .card-header {
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 15px;
    }

    /* Product Card */
    .product-card {
      display: flex;
      align-items: center;
      border-bottom: 1px solid #eee;
      padding: 10px 0;
    }

    .product-card:last-child {
      border-bottom: none;
    }

    .product-card img {
      height: 80px;
      width: 80px;
      margin-right: 15px;
      border-radius: 4px;
    }

    .product-details {
      flex-grow: 1;
    }

    .product-details h4 {
      font-size: 1.1rem;
      margin-bottom: 5px;
    }

    /* Buttons */
    .btn {
      display: inline-block;
      padding: 10px 15px;
      border: none;
      border-radius: 5px;
      text-decoration: none;
      text-align: center;
      font-size: 1rem;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    .btn-danger {
      background-color: #81C408;
      color: #fff;
    }

    .btn-secondary {
      background-color: #6c757d;
      color: #fff;
    }

    .btn-danger:hover {
      background-color: #c82333;
    }

    .btn-secondary:hover {
      background-color: #5a6268;
    }

    /* Cancellation Reason Section */
    .cancellation-reason-container, 
     .return-reason-container {
      padding: 15px;
      border: 1px solid #ddd;
      background-color: #f8f9fa;
      border-radius: 5px;
      margin-top: 20px;
      display: none;
    }

    .cancellation-reason-container h3 , 
    .return-reason-container h3{
      margin-bottom: 15px;
      font-size: 1.2rem;
    }

    .cancellation-reason-container input,
     .return-reason-container input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      margin-bottom: 15px;
    }

    /* Footer */
    .footer {
      text-align: center;
      padding: 20px;
      background-color: #333;
      color: #fff;
      margin-top: 20px;
    }

    /* tracking */
    .order-status.pending {
            background-color: #fff3cd;
            color: #ffc107;
        }

        .order-status.cancelled {
            background-color: #f8d7da;
            color: #dc3545;
        }
  /* Tracking Progress Styles */
  .tracking-progress {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin: 20px 0;
        }

        .tracking-step {
            text-align: center;
            flex: 1;
            position: relative;
        }

        .tracking-step.completed .icon {
            background-color: #28a745;
            color: white;
        }

        .tracking-step.active .icon {
            background-color: #ffc107;
            color: white;
        }

        .tracking-step .icon {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background-color: #e9ecef;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 10px;
        }

        .tracking-step p {
            margin: 0;
            font-size: 0.9rem;
            color: #666;
        }

        .tracking-line {
            flex: 1;
            height: 2px;
            background-color: #e9ecef;
            margin: 0 10px;
        }

        .tracking-line.completed {
            background-color: #28a745;
        }
        .btn-cancel {
            background-color: #dc3545;
            color: white;
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            font-size: 0.9rem;
            transition: background-color 0.3s ease;
        }

        .btn-cancel:hover {
            background-color: #c82333;
        }

        /* Order Details Layout Improvements */
        .order-details-section {
            margin-bottom: 20px;
        }

        .order-details-section p {
            margin: 0;
        }

        .order-details-section strong {
            color: #333;
        }

        .cancel-reason {
            font-size: 0.9rem;
            margin-bottom: 10px;
            width: 200px;
        }
        .invoice-header {
            display: flex;
            justify-content: space-between;
            align-items: start;
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 2px solid #eee;
        }
        .company-details {
            flex: 1;
        }
        .company-details img {
            max-height: 60px;
            margin-bottom: 10px;
        }
        .invoice-details {
            text-align: right;
        }
        .invoice-details h1 {
            color: #088178;
            margin: 0 0 10px 0;
        }
        .shipping-address {
            margin-bottom: 30px;
        }
        .order-details table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 30px;
        }
        .order-details th {
            background: #f8f9fa;
            text-align: left;
            padding: 12px;
            border-bottom: 2px solid #ddd;
        }
        .order-details td {
            padding: 12px;
            border-bottom: 1px solid #ddd;
        }
        .text-right {
            text-align: right;
        }
        .total-section {
            width: 300px;
            margin-left: auto;
        }
        .total-row {
            display: flex;
            justify-content: space-between;
            padding: 8px 0;
        }
        .total-row.final {
            font-weight: bold;
            border-top: 2px solid #ddd;
            margin-top: 8px;
            padding-top: 12px;
        }
        .discount {
            color: #28a745;
        }
        @media print {
            body {
                print-color-adjust: exact;
                -webkit-print-color-adjust: exact;
            }
            .no-print {
                display: none;
            }
        }


  </style>
</head>
<body>
   
    <script>
      const orderId = "<%= order._id %>";
      
   </script>
   

  <div class="container">
    <h1 style="background-color: #81C408;">Order Details</h1>
    <a href="/home">Home</a>
    <!-- Order Information -->
    <div class="card">
      <p id="ordersId"><strong>ORDER ID:</strong> <%= order.orderId %></p>
      <p><strong>Status:</strong><%= order.status %></p>
      <p><strong>Payment Method : </strong><%= order.paymentMethod %></p>
    </div>
    
    <!-- Shipping Address -->
    <div class="card">
      <div class="card-header">Shipping Details</div>
      <p>Name: <%= order.address.name %></p>
      <p>Address: <%= order.address.landmark %>,</p>
      <p> <%= order.address.district %>,</p>
      <p> <%= order.address.state %> </p>
      <p> <%= order.address.pincode %></p>
      <p>Contact: <%= order.address.phone %></p>
    </div>
<% if(order.status=="Cancelled") {%>
  <div class="card">
    <div class="card-header">Cancel Reason</div>
<p><%=order.cancelReason%></p>
</div>
<%}%>


 <!-- Order Placed -->

<% for(let i=0; i < order.orderedItems.length; i++) { %>
  <div class="order-item card">
      <!-- Individual Product Tracking -->
      <div class="tracking-progress card-header">
          <!-- Order Placed -->
          <div
              class="tracking-step <%= ['Pending', 'Processing', 'Shipped', 'Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
              <div class="icon">âœ”</div>
              <p>Order Placed</p>
          </div>
          <div
              class="tracking-line <%= ['Processing', 'Shipped', 'Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
          </div>

          <!-- Order Processed -->
          <div
              class="tracking-step <%= ['Processing', 'Shipped', 'Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
              <div class="icon">âœ”</div>
              <p>Processing</p>
          </div>
          <div
              class="tracking-line <%= ['Shipped', 'Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
          </div>

          <!-- Shipped -->
          <div
              class="tracking-step <%= ['Shipped', 'Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
              <div class="icon">ðŸšš</div>
              <p>Shipped</p>
          </div>
          <div
              class="tracking-line <%= ['Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
          </div>

          <!-- Out for Delivery -->
          <div
              class="tracking-step <%= ['Out for Delivery', 'Delivered'].includes(order.orderedItems[i].status) ? 'completed' : '' %>">
              <div class="icon">ðŸ“¦</div>
              <p>Out for Delivery</p>
          </div>
          <div
              class="tracking-line <%= order.orderedItems[i].status === 'Delivered' ? 'completed' : '' %>">
          </div>

          <!-- Delivered -->
          <div
              class="tracking-step <%= order.orderedItems[i].status === 'Delivered' ? 'completed' : '' %>">
              <div class="icon">âœ”</div>
              <p>Delivered</p>
          </div>
      </div>

     <!-- Product Details -->
     <div class="card">
      <div class="card-header">Product Details</div>
      
       <div class="product-card">
          <img src="<%= order.orderedItems[i].productImage %>" alt="no image" >
          <div class="product-details">
              <h4><%= order.orderedItems[i].productName %></h4>
              <p><strong>Quantity:</strong><%= order.orderedItems[i].quantity %> </p>
              <p><strong>Price:</strong> â‚¹<%= order.orderedItems[i].price %> </p>
              <p><strong>Product Total:</strong> â‚¹<%= order.orderedItems[i].totalPrice %> </p>
              
        </div>
          </div>
  
<!-- Cancel/Return Button Section -->
<div class="d-flex flex-column align-items-end">
  <% if ((order.orderedItems[i].status === 'Pending' ||
         order.orderedItems[i].status === 'Processing')&&(order.status!='Cancelled')){ %>
               <select class="form-select mb-2 cancel-single-reason"
                data-cancel-order-id="<%= order._id%>"
               data-cancel-product-id="<%= order.orderedItems[i].productId._id%>">
              <option value="">Select Cancellation Reason</option>
              <option value="Changed My Mind">Changed My Mind</option>
              <option value="Found a Cheaper Alternative">Found a Cheaper Alternative</option>
              <option value="Incorrect Item Ordered">Incorrect Item Ordered</option>
              <option value="Delivery Taking Too Long">Delivery Taking Too Long</option>
              <option value="Product Quality Concern">Product Quality Concern</option>
              <option value="Other Reason">Other Reason</option>
      </select>
      <button class="btn btn-danger btn-sm cancel-single-product"
              data-cancel-order-id="<%= order._id %>"
              data-cancel-product-id="<%= order.orderedItems[i].productId._id%>">
          Cancel Order
      </button>
  <% } else if (order.orderedItems[i].status === 'Delivered') { %>
      <% if (order.orderedItems[i].returnDeclinedReason||0) { %>
          <button class="btn btn-danger btn-sm" disabled>
              Return Declined
          </button>
          <small class="text-muted d-block mt-1">
              Reason: <%= order.orderedItems[i].returnDeclinedReason %>
          </small>
      <% } else { %>
          <select class="form-select mb-2 return-reason" 
                  data-order-id="<%= order._id %>" 
                  data-product-id="<%= order.orderedItems[i].productId._id %>">
              <option value="">Select Return Reason</option>
              <option value="Defective Product">Defective Product</option>
              <option value="Not as Described">Not as Described</option>
              <option value="Better Alternative Found">Better Alternative Found</option>
              <option value="Quality Issues">Quality Issues</option>
              <option value="Other">Other</option>
          </select>
         
          <button class="btn btn-warning btn-sm return-product" 
        data-order-id="<%= order._id %>" 
        data-product-id="<%= order.orderedItems[i].productId._id || order.orderedItems[i].productId %>">
    Return
</button>
      <% } %>
  <% } else { %>
      <button class="btn btn-secondary btn-sm" disabled>
          <%= order.orderedItems[i].status %>
      </button>
  <% } %>
</div>
                                      </div>
                                  </div>
                                  <% } %>
                                             
                      

                      
                    <!-- Order Summary Section -->
                    <div class="card">
  <div class="card-header">
      Order Summary
  </div>
  <!-- <div class="card-body"> -->
      <p><strong>Order Date:</strong> <%= order.createdOn.toLocaleDateString() %></p>
      <p><strong>Payment Method:</strong> <%= order.paymentMethod %></p>
      <p><strong>Subtotal:</strong> â‚¹<%= order.subtotal %></p>
      <% if(order.discount > 0) { %>
        <P><strong>Coupon Code:</strong><%=order.couponCode%><p><strong>Coupon Discount:</strong>  <span class="text-success">â‚¹<%= order.discount %></span></p>
        </p>
      <% } %>
     
      <p><strong>Delivery Charge:</strong> â‚¹<%= order.deliveryCharge %></p>
      <p><strong>Total:</strong> â‚¹<%= order.finalAmount %></p>
      <% if (order.paymentMethod === 'RAZORPAY' && order.paymentStatus === 'Pending' && order.status!='Cancelled') { %>
        <div class="payment-actions">
                <input type="hidden" name="orderId" value="<%= order.orderId %>">
                <button class="btn btn-danger" onclick="handlePayment('<%= order.orderId %>')">Complete Payment</button>
            </div>
    <% } %>

<%if(order.paymentStatus=='Paid' && order.status!='Cancelled'){%>
      <!-- Add the download button right here, after the total -->
      <div class="mt-3">
          <a href="/download-invoice/<%= order._id %>" class="btn btn-primary">
              <i class="bi bi-download me-2"></i>Download Invoice
          </a>
       </div>
  
   <%}%>

    <!-- Cancellation Section -->
    <% if(order.status == "Processing"||order.status =="Pending"){ %>
      <div style="text-align: center;">
        <button id="button-cancel" class="btn btn-danger">Cancel Order</button>
      </div>
  
      <div id="reasondiv" class="cancellation-reason-container">
        <h3>Reason for Cancellation</h3>
        <div id="'errorCancel" class="text-center text-danger"></div>
        <input type="text" id="cancellation-reason" placeholder="Enter reason for cancellation">
        <div style="text-align: center;">
          <button id="go-back" class="btn btn-secondary">Go Back</button>
          <button id="cancel-order"class="btn btn-danger"  >Submit</button>
        </div>
      </div>
    </div>
   <%}%>
  
      <!-- Return Section -->
       <% if(order.status == "Delivered"){ %>
      <div style="text-align: center;">
        <button id="button-return" class="btn btn-danger">Return Order</button>
      </div>
  
      <div id="returnreasondiv" class="return-reason-container">
        <h3>Reason for Return</h3>
        <div class="text-danger text-center" id="errorreturn"></div>
        <input type="text" id="return-reason" placeholder="Enter reason for return">
        <div style="text-align: center;">
          <button id="go-back-return" class="btn btn-secondary">Go Back</button>
          <button id="return-order"class="btn btn-danger"  >Submit</button>
        </div>
      </div>
    </div>
   <%}%>
  </div>
   
</div></div></div>
</body>
</html>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
 <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script>
    document.addEventListener("DOMContentLoaded", function () {
  
    const buttonCancel = document.getElementById('button-cancel');
    const buttonGoBack = document.getElementById('go-back');
    const buttonCancelOrder = document.getElementById('cancel-order');
    const cancelReason = document.getElementById('reasondiv');
    const reason=document.getElementById('cancellation-reason')
    if (buttonCancel && cancelReason && buttonGoBack && buttonCancelOrder) {
    buttonCancel.addEventListener('click', () => {
      cancelReason.style.display = 'block';
      buttonCancel.style.display = 'none';
    });

    buttonGoBack.addEventListener('click', () => {
      cancelReason.style.display = 'none';
      buttonCancel.style.display = 'block';
    });
    buttonCancelOrder.addEventListener('click', () => {
  if (reason.value.trim() === "") {
    document.getElementById('errorCancel').textContent='Please fill the reason'
   
    return false
  } 
    fetch(`/orders/cancel/${orderId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        cancelReason: reason.value.trim(), 
        status: "Cancelled",
      }),
    })
    .then((res) => {
  if (!res.ok) throw new Error("Failed to cancel order");
  return res.json();
})
.then((data) => {
  Swal.fire('Cancelled!', 'Order cancelled successfully.', 'success');
  setTimeout(() => location.reload(), 1500);
})
.catch((err) => {
  Swal.fire('Error!', 'Server Error', 'error');
  console.error(err);
});
  
});

    }
//return
    const buttonReturn = document.getElementById('button-return');
    const buttonGoBackReturn = document.getElementById('go-back-return');
    const buttonReturnOrder = document.getElementById('return-order');
    const returnReason = document.getElementById('returnreasondiv');
    const Rreason=document.getElementById('return-reason')
    if (buttonReturn && returnReason && buttonGoBackReturn && buttonReturnOrder) {
    buttonReturn.addEventListener('click', () => {
     
      returnReason.style.display = 'block';
      buttonReturn.style.display = 'none';
    });

    buttonGoBackReturn.addEventListener('click', () => {
      
      returnReason.style.display = 'none';
      buttonReturn.style.display = 'block';
    });
    buttonReturnOrder.addEventListener('click', () => {
      
  if (Rreason.value.trim() === "") {
    document.getElementById('errorreturn').textContent='Please fill the reason'
    
    return false
  } 
  
  
    fetch(`/orders/reutrnrequest/${orderId}`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        returnReason: Rreason.value.trim(), // Use reason.value here
        status: "Return Request",
      }),
    })
    .then((res) => {
  if (!res.ok) throw new Error("Failed for Return Request");
  return res.json();
})
.then((data) => {
  Swal.fire('Cancelled!', 'Requsted to Return Order.', 'success');
  setTimeout(() => location.reload(), 1500);
})
.catch((err) => {
  Swal.fire('Error!', "Something went wrong", 'error');
  console.error(err);
});
  
});

    }
  



// return and cancel
                    document.querySelectorAll('.cancel-single-product').forEach(button => {
                    button.addEventListener('click', async () => {
                        const orderId = button.getAttribute('data-cancel-order-id');
                        const productId = button.getAttribute('data-cancel-product-id');
                        
                        
                        const reasonDropdown1 = document.querySelector(`.cancel-single-reason[data-cancel-order-id="${orderId}"][data-cancel-product-id="${productId}"]`);
                        if (!reasonDropdown1) {
                
                return;
            }
                      
                       
                        const cancellationReason = reasonDropdown1.value;

                        
                        if (!cancellationReason) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Oops...',
                                text: 'Please select a cancellation reason',
                                confirmButtonText: 'OK'
                            });
                            return;
                        }

                        
                        const result = await Swal.fire({
                            title: 'Are you sure?',
                            text: "You won't be able to revert this cancellation!",
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#3085d6',
                            cancelButtonColor: '#d33',
                            confirmButtonText: 'Yes, cancel it!'
                        });

                        // If user confirms, proceed with the cancellation
                        if (result.isConfirmed) {
                            try {
                                const response = await fetch('/order/cancel-product', {
                                    method: 'POST',
                                    headers: {
                                        'Content-Type': 'application/json',
                                    },
                                    body: JSON.stringify({
                                        orderId,
                                        productId,
                                        cancellationReason
                                    }),
                                });

                                const result = await response.json();

                                if (result.success) {
                                    Swal.fire({
                                        icon: 'success',
                                        title: 'Success!',
                                        text: result.message,
                                        confirmButtonText: 'OK',
                                    }).then(() => {
                                        location.reload(); // Refresh the page to reflect changes
                                    });
                                } else {
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Error!',
                                        text: result.message,
                                        confirmButtonText: 'OK',
                                    });
                                }
                            } catch (error) {
                                console.error('Error:', error);
                                Swal.fire({
                                    icon: 'error',
                                    title: 'Error!',
                                    text: 'An error occurred while canceling the product.',
                                    confirmButtonText: 'OK',
                                });
                            }
                        }
                    });
                });

                //return
                document.querySelectorAll('.return-product').forEach(button => {
                button.addEventListener('click', async () => {
        try {
            const orderId = button.getAttribute('data-order-id');
            const productId = button.getAttribute('data-product-id');

            // Find the corresponding reason dropdown for this specific product
            const reasonDropdown = button.closest('.d-flex').querySelector('.return-reason');
            
            if (!reasonDropdown) {
                throw new Error('Return reason dropdown not found');
            }

            const returnReason = reasonDropdown.value;

            // Validate return reason
            if (!returnReason) {
                await Swal.fire({
                    icon: 'warning',
                    title: 'Return Reason Required',
                    text: 'Please select a reason for returning this product',
                    confirmButtonText: 'OK'
                });
                return;
            }

            // Confirmation dialog
            const confirmResult = await Swal.fire({
                title: 'Confirm Return',
                text: 'Are you sure you want to return this product?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, return it!'
            });

            if (!confirmResult.isConfirmed) {
                return;
            }

            // Submit return request
            const response = await fetch('/order/return-product', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    orderId,
                    productId,
                    returnReason
                }),
            });

            const result = await response.json();

            if (result.success) {
                await Swal.fire({
                    icon: 'success',
                    title: 'Return Requested',
                    text: result.message,
                    confirmButtonText: 'OK'
                });
                location.reload();
            } else {
                throw new Error(result.message || 'Return request failed');
            }

        } catch (error) {
            console.error('Return request error:', error);
            await Swal.fire({
                icon: 'error',
                title: 'Return Request Failed',
                text: error.message || 'An error occurred while processing your return request',
                confirmButtonText: 'OK'
            });
        }
    });
});

})

async function handlePayment(orderId) {
    try {
        const response = await fetch("/getOrderDetails", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ orderId }),
        });

        const orderData = await response.json();

        if (!response.ok || !orderData.id) {
            throw new Error(orderData.message || "Failed to fetch order details");
        }

        
        const options = {
          key: "rzp_test_lcQt1KNawGzBhX",
          
           amount: orderData.amount * 100,
            currency: "INR",
            name: "Fruitables",
            description: "Order Payment",
            order_id: orderData.id,
            handler: async function (response) {
                const verifyResponse = await fetch("/razorpayverifyPayment", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        paymentData: response,
                        orderId: orderId,  // Use orderId instead of cartId
                    }),
                });

                const verifyResult = await verifyResponse.json();
                 
                if (verifyResult.success) {
                  await Swal.fire({
                icon: "success",
                text: "Payment successful! Redirecting...",
                showConfirmButton: false,
                timer: 1500
                
            });
           
            setTimeout(() => {
                window.location.href = `/success?id=${verifyResult.orderId}`;
            }, 1500);
                } else {
                    await Swal.fire({
                        icon: "error",
                        title: "Payment Failed!",
                        text: "Payment verification failed. Please try again.",
                        confirmButtonColor: "#d33",
                        confirmButtonText: "Retry",
                    });
                }
            },
            prefill: {
                name: orderData?.address?.name||"customer",
                contact: orderData?.address?.phone||'9400511584'
            },
            theme: {
                color: "#3399cc",
            },
        };

        const razorpay = new Razorpay(options);
        
        razorpay.open();
    } catch (error) {
        console.error("Payment error:", error);
        Swal.fire({
            icon: "error",
            title: "Insufficient stock",
            text: error.message || "Something went wrong. Please try again!",
            confirmButtonColor: "#d33",
            confirmButtonText: "OK",
        });
    }
}

  </script>

</body>
</html>
