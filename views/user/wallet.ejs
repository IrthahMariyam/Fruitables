<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Fruitables - Vegetable Website Template</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <meta content="" name="keywords" />
    <meta content="" name="description" />    
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600&family=Raleway:wght@600;800&display=swap"
      rel="stylesheet"
    />    
    <link
      rel="stylesheet" href="https://use.fontawesome.com/releases/v5.15.4/css/all.css" />
    <link   href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css"  rel="stylesheet" />
       
    <link href="/css/bootstrap.min.css" rel="stylesheet" />    
    <link href="/css/style.css" rel="stylesheet" />
    <style>
      body {
        background-color: #f7f7f7;
   
  }
  
  html, body {
  height: auto !important;
  overflow: visible !important;
}

.container-fluid {
  min-height: auto !important;
}

  
      .card {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      }
  
      .card-header {
        font-size: 24px;
        background-color: #81C408;
      }
  
      .card-body .display-4 {
        font-size: 48px;
        color: #333;
      }
  
      table {
        margin-top: 20px;
      }
  
      td {
        font-size: 16px;
      }
  
      .text-danger {
        color: #dc3545 !important;
      }
  
      .text-success {
        color: #28a745 !important;
      }
      html {
  overflow-y: scroll !important;
}

    </style>
  
  
  </head>

  <body>
   
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
     <div class="container-fluid">
             <div class="container topbar bg-primary d-none d-lg-block">
             <div class="d-flex justify-content-between">
             <div class="top-info ps-2"></div>
             <div>
             <medium class="me-3"> Welcome </medium>
             </div>
             <div class="top-link pe-2">
            
              <% if (locals.user!=null) { %>
              <%=locals.user.name %>
              <%  }%>
            </div>
        </div>
      </div>
      <div class="container px-0 ">
        <nav class="navbar navbar-light bg-white navbar-expand-xl">
          <a href="/" class="navbar-brand"
            ><h1 class="text-primary display-6">Fruitables</h1></a
          >
          <button
            class="navbar-toggler py-2 px-3"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarCollapse"
          >
            <span class="fa fa-bars text-primary"></span>
          </button>
          <div class="collapse navbar-collapse " id="navbarCollapse">
            
            <div class="navbar-nav position-absolute start-50 translate-middle-x d-flex">
                <a href="/home" class="nav-item nav-link active">Home</a>
                <a href="/shop" class="nav-item nav-link mx-3">Shop</a>
            </div>
        
            
            <div class="navbar-nav ms-auto">
                <% if (locals.user != null) { %>
                    <a href="/userProfile/<%= user._id %>" class="nav-item nav-link active">Profile</a>
                    <a href="/logout" class="nav-item nav-link active">Logout</a>
                <% } else { %>
                    <a href="/login" class="nav-item nav-link active">Login</a>
                    <a href="/signup" class="nav-item nav-link active">Sign up</a>
                <% } %>
                <div class="d-flex m-3 me-0">
                    <a href="getWishlist" class="position-relative me-4 my-auto">
                        <i class="fa fa-heart" style="font-size: 38px; color: red"></i>
                    </a>
                    <a href="/getcart" class="position-relative me-4 my-auto">
                        <i class="fa fa-shopping-bag fa-2x"></i>
                        
                    </a>
                </div>
            </div>
        </div>
        
        </nav>
    
      <link
        rel="stylesheet"
        href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css"
      />
     
      <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
      <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
      <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
      
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="main.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    </head>
  <body>
  
    <div class="container mt-5">
      
      <div class="card text-center">
        <div class="card-header text-white">
          <h3>My Wallet</h3>
        </div>
    
        <h4 class="card-title">Current Balance</h4>
        <p class="display-4">â‚¹<%= wallet.balance.toFixed(2) %></p>
    
        <button class="btn btn-outline-dark" onclick="addMoneyInWallet()">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
            fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round"
            stroke-linejoin="round" class="lucide lucide-circle-plus mr-2 h-4 w-4" data-id="16">
            <circle cx="12" cy="12" r="10"></circle>
            <path d="M8 12h8"></path>
            <path d="M12 8v8"></path>
          </svg>
          Add Funds
        </button>
      </div>
    
      <!-- Transaction History Section -->
      <div class="mt-4">
        <h5>Recent Transactions</h5>
        <table class="table table-striped">
          <tbody>
            <% if (transactions && transactions.length > 0) { %> 
              <% transactions.forEach(transaction => { %>
                <tr>
                  <td>
                    <% if (transaction.transactionType === 'credit') { %>
                      <i class="fas fa-arrow-up text-success"></i>
                    <% } else { %>
                      <i class="fas fa-arrow-down text-danger"></i>
                    <% } %>
                    <%= transaction.description %>
                  </td>
                  <td><%= new Date(transaction.date).toLocaleDateString() %></td>
                  <td class="<%= transaction.transactionType === 'credit' ? 'text-success' : 'text-danger' %>">
                    <%= transaction.transactionType === 'credit' ? '+' : '-' %><%= transaction.amount.toFixed(2) %>
                  </td>
                </tr>
              <% }) %> 
            <% } else { %>
              <tr>
                <td colspan="3">No transactions found</td>
              </tr>
            <% } %>
          </tbody>
        </table>
    
        
      </div>
    
      <!-- Pagination -->
      
    <div class="pagination" style="display: flex; justify-content: center; margin-top: 20px;">
     
      <% for (let i = 1; i <= totalPages; i++) { %>
          <a href="?page=<%= i %>" class="btn <%= i === currentPage ? 'btn-primary' : 'btn-light' %>">
              <%= i %>
          </a>
      <% } %>

  </div>
  


</div>
    </div>    
    
    <script
      src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js"
      integrity="sha384-b/U6ypiBEHpOf/4+1nzFpr53nxSS+GLCkfwBdFNTxtclqqenISfwAzpKaMNFNmj4"
      crossorigin="anonymous"
    ></script>
    
    
    
    
    <script>
      document.addEventListener("DOMContentLoaded", () => {
    document.body.style.overflow = "auto";
    document.documentElement.style.overflow = "auto";
});
function addMoneyInWallet() {
    Swal.fire({
        title: "Enter Amount",
        input: "number",
        inputPlaceholder: "Enter amount to add",
        inputAttributes: { min: 1, max: 10000 },
        showCancelButton: true,
        confirmButtonColor: "#3085d6",
        cancelButtonColor: "#d33",
        confirmButtonText: "Proceed",
    }).then((result) => {
        if (result.isConfirmed) {
            let amount = Number(result.value);
            if (isNaN(amount) || amount <= 0) {
                Swal.fire("Error", "Enter a valid amount", "error");
                return;
            }

            axios.post("/wallet/create-order", { amount })
                .then((orderResponse) => {
                    if (orderResponse.data.error) {
                        Swal.fire("Error", orderResponse.data.error, "error");
                        return;
                    }

                    const { orderId, currency } = orderResponse.data;
                    const options = {
                        key: "rzp_test_lcQt1KNawGzBhX",
                        amount: amount * 100,
                        currency: currency,
                        name: "Fruitables",
                        description: "Add money to wallet",
                        order_id: orderId,
                        handler: function (response) {
                            axios.post("/wallet/add/money", {
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature,
                                amount,
                            }).then((paymentResponse) => {
                                if (paymentResponse.data.ok) {
                                    Swal.fire("Success!", "Money added successfully!", "success").then(() => {
                                        location.reload();
                                    });
                                } else {
                                    Swal.fire("Error", paymentResponse.data.msg, "error");
                                }
                            }).catch(() => {
                                Swal.fire("Error", "Payment verification failed!", "error");
                            });
                        },
                        theme: { color: "#3399cc" },
                    };

                    const rzp = new Razorpay(options);
                    rzp.open();
                })
                .catch(error => {
                    const message = error.response?.data?.message || "Failed !";
                    Swal.fire("Error", message, "error");
                });
        }
    });
}


//       function addMoneyInWallet() {
//         Swal.fire({
//           title: "Enter Amount",
//           input: "number",
//           inputPlaceholder: "Enter amount to add",
//           inputAttributes: {
//             min: 1,
//             max: 10000,
//           },
//           showCancelButton: true,
//           confirmButtonColor: "#3085d6",
//           cancelButtonColor: "#d33",
//           confirmButtonText: "Proceed",
//         }).then((result) => {
//           if (result.isConfirmed && result.value > 0) {
           
//             const amount = result.value;

//             axios
//               .post("/wallet/create-order", { amount })
//               .then((orderResponse) => {
//                 if(orderResponse.data.error){
//       Swal.fire("Error", orderResponse.data.error, "error");
//       return;
//     }
//                 const { orderId, currency } = orderResponse.data;

//                 const options = {
//                   key: "rzp_test_lcQt1KNawGzBhX",
//                   amount: amount*100,
//                   currency: currency,
//                   name: "Fruitables",
//                   description: "Add money to wallet",
//                   order_id: orderId,
//                   handler: function (response) {
//                     axios
//                       .post("/wallet/add/money", {
//                         razorpay_payment_id: response.razorpay_payment_id,
//                         razorpay_order_id: response.razorpay_order_id,
//                         razorpay_signature: response.razorpay_signature,
//                         amount,
//                       })
//                       .then((paymentResponse) => {
//                         if (paymentResponse.data.ok) {
//                                     Swal.fire("Success!", "Money added successfully!", "success").then(() => {
//                                         location.reload();
//                                     });
//                                 } else {
//                                     Swal.fire("Error", paymentResponse.data.msg, "error");
//                                 }
//                             }).catch(error => {
//                                 Swal.fire("Error", "Payment verification failed!", "error");
//                             });
//                         },
//                         theme: { color: "#3399cc" },
//                     };

//                     const rzp = new Razorpay(options);
//                     rzp.open();
//                 })
//                 .catch(error => {
//   const message = error.response?.data?.message || "Failed to create order!";
//   Swal.fire("Error", message, "error");
// });
//         }
//     });
// }

    </script>
  </body>
</html